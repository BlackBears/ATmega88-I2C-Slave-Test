
ATM8_I2C_SLAVE_TEST_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800102  00800102  00000962  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002d0  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bf4  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046a  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b54  00000000  00000000  00002455  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000564  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004f8  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000a1  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00003cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__ctors_end>
   2:	fc c0       	rjmp	.+504    	; 0x1fc <__bad_interrupt>
   4:	fb c0       	rjmp	.+502    	; 0x1fc <__bad_interrupt>
   6:	fa c0       	rjmp	.+500    	; 0x1fc <__bad_interrupt>
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__bad_interrupt>
   a:	f8 c0       	rjmp	.+496    	; 0x1fc <__bad_interrupt>
   c:	f7 c0       	rjmp	.+494    	; 0x1fc <__bad_interrupt>
   e:	f6 c0       	rjmp	.+492    	; 0x1fc <__bad_interrupt>
  10:	f5 c0       	rjmp	.+490    	; 0x1fc <__bad_interrupt>
  12:	f4 c0       	rjmp	.+488    	; 0x1fc <__bad_interrupt>
  14:	f3 c0       	rjmp	.+486    	; 0x1fc <__bad_interrupt>
  16:	f2 c0       	rjmp	.+484    	; 0x1fc <__bad_interrupt>
  18:	f1 c0       	rjmp	.+482    	; 0x1fc <__bad_interrupt>
  1a:	f0 c0       	rjmp	.+480    	; 0x1fc <__bad_interrupt>
  1c:	ef c0       	rjmp	.+478    	; 0x1fc <__bad_interrupt>
  1e:	ee c0       	rjmp	.+476    	; 0x1fc <__bad_interrupt>
  20:	ed c0       	rjmp	.+474    	; 0x1fc <__bad_interrupt>
  22:	ec c0       	rjmp	.+472    	; 0x1fc <__bad_interrupt>
  24:	eb c0       	rjmp	.+470    	; 0x1fc <__bad_interrupt>
  26:	ea c0       	rjmp	.+468    	; 0x1fc <__bad_interrupt>
  28:	e9 c0       	rjmp	.+466    	; 0x1fc <__bad_interrupt>
  2a:	5b c1       	rjmp	.+694    	; 0x2e2 <__vector_21>
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__bad_interrupt>
  2e:	e6 c0       	rjmp	.+460    	; 0x1fc <__bad_interrupt>
  30:	17 c3       	rjmp	.+1582   	; 0x660 <__vector_24>
  32:	e4 c0       	rjmp	.+456    	; 0x1fc <__bad_interrupt>
  34:	19 c4       	rjmp	.+2098   	; 0x868 <__vector_24+0x208>
  36:	20 c4       	rjmp	.+2112   	; 0x878 <__vector_24+0x218>
  38:	1f c4       	rjmp	.+2110   	; 0x878 <__vector_24+0x218>
  3a:	1e c4       	rjmp	.+2108   	; 0x878 <__vector_24+0x218>
  3c:	1d c4       	rjmp	.+2106   	; 0x878 <__vector_24+0x218>
  3e:	1c c4       	rjmp	.+2104   	; 0x878 <__vector_24+0x218>
  40:	1b c4       	rjmp	.+2102   	; 0x878 <__vector_24+0x218>
  42:	1a c4       	rjmp	.+2100   	; 0x878 <__vector_24+0x218>
  44:	29 c3       	rjmp	.+1618   	; 0x698 <__vector_24+0x38>
  46:	18 c4       	rjmp	.+2096   	; 0x878 <__vector_24+0x218>
  48:	17 c4       	rjmp	.+2094   	; 0x878 <__vector_24+0x218>
  4a:	16 c4       	rjmp	.+2092   	; 0x878 <__vector_24+0x218>
  4c:	15 c4       	rjmp	.+2090   	; 0x878 <__vector_24+0x218>
  4e:	14 c4       	rjmp	.+2088   	; 0x878 <__vector_24+0x218>
  50:	13 c4       	rjmp	.+2086   	; 0x878 <__vector_24+0x218>
  52:	12 c4       	rjmp	.+2084   	; 0x878 <__vector_24+0x218>
  54:	21 c3       	rjmp	.+1602   	; 0x698 <__vector_24+0x38>
  56:	10 c4       	rjmp	.+2080   	; 0x878 <__vector_24+0x218>
  58:	0f c4       	rjmp	.+2078   	; 0x878 <__vector_24+0x218>
  5a:	0e c4       	rjmp	.+2076   	; 0x878 <__vector_24+0x218>
  5c:	0d c4       	rjmp	.+2074   	; 0x878 <__vector_24+0x218>
  5e:	0c c4       	rjmp	.+2072   	; 0x878 <__vector_24+0x218>
  60:	0b c4       	rjmp	.+2070   	; 0x878 <__vector_24+0x218>
  62:	0a c4       	rjmp	.+2068   	; 0x878 <__vector_24+0x218>
  64:	24 c3       	rjmp	.+1608   	; 0x6ae <__vector_24+0x4e>
  66:	08 c4       	rjmp	.+2064   	; 0x878 <__vector_24+0x218>
  68:	07 c4       	rjmp	.+2062   	; 0x878 <__vector_24+0x218>
  6a:	06 c4       	rjmp	.+2060   	; 0x878 <__vector_24+0x218>
  6c:	05 c4       	rjmp	.+2058   	; 0x878 <__vector_24+0x218>
  6e:	04 c4       	rjmp	.+2056   	; 0x878 <__vector_24+0x218>
  70:	03 c4       	rjmp	.+2054   	; 0x878 <__vector_24+0x218>
  72:	02 c4       	rjmp	.+2052   	; 0x878 <__vector_24+0x218>
  74:	48 c3       	rjmp	.+1680   	; 0x706 <__vector_24+0xa6>
  76:	00 c4       	rjmp	.+2048   	; 0x878 <__vector_24+0x218>
  78:	ff c3       	rjmp	.+2046   	; 0x878 <__vector_24+0x218>
  7a:	fe c3       	rjmp	.+2044   	; 0x878 <__vector_24+0x218>
  7c:	fd c3       	rjmp	.+2042   	; 0x878 <__vector_24+0x218>
  7e:	fc c3       	rjmp	.+2040   	; 0x878 <__vector_24+0x218>
  80:	fb c3       	rjmp	.+2038   	; 0x878 <__vector_24+0x218>
  82:	fa c3       	rjmp	.+2036   	; 0x878 <__vector_24+0x218>
  84:	14 c3       	rjmp	.+1576   	; 0x6ae <__vector_24+0x4e>
  86:	f8 c3       	rjmp	.+2032   	; 0x878 <__vector_24+0x218>
  88:	f7 c3       	rjmp	.+2030   	; 0x878 <__vector_24+0x218>
  8a:	f6 c3       	rjmp	.+2028   	; 0x878 <__vector_24+0x218>
  8c:	f5 c3       	rjmp	.+2026   	; 0x878 <__vector_24+0x218>
  8e:	f4 c3       	rjmp	.+2024   	; 0x878 <__vector_24+0x218>
  90:	f3 c3       	rjmp	.+2022   	; 0x878 <__vector_24+0x218>
  92:	f2 c3       	rjmp	.+2020   	; 0x878 <__vector_24+0x218>
  94:	38 c3       	rjmp	.+1648   	; 0x706 <__vector_24+0xa6>
  96:	f0 c3       	rjmp	.+2016   	; 0x878 <__vector_24+0x218>
  98:	ef c3       	rjmp	.+2014   	; 0x878 <__vector_24+0x218>
  9a:	ee c3       	rjmp	.+2012   	; 0x878 <__vector_24+0x218>
  9c:	ed c3       	rjmp	.+2010   	; 0x878 <__vector_24+0x218>
  9e:	ec c3       	rjmp	.+2008   	; 0x878 <__vector_24+0x218>
  a0:	eb c3       	rjmp	.+2006   	; 0x878 <__vector_24+0x218>
  a2:	ea c3       	rjmp	.+2004   	; 0x878 <__vector_24+0x218>
  a4:	39 c3       	rjmp	.+1650   	; 0x718 <__vector_24+0xb8>
  a6:	e8 c3       	rjmp	.+2000   	; 0x878 <__vector_24+0x218>
  a8:	e7 c3       	rjmp	.+1998   	; 0x878 <__vector_24+0x218>
  aa:	e6 c3       	rjmp	.+1996   	; 0x878 <__vector_24+0x218>
  ac:	e5 c3       	rjmp	.+1994   	; 0x878 <__vector_24+0x218>
  ae:	e4 c3       	rjmp	.+1992   	; 0x878 <__vector_24+0x218>
  b0:	e3 c3       	rjmp	.+1990   	; 0x878 <__vector_24+0x218>
  b2:	e2 c3       	rjmp	.+1988   	; 0x878 <__vector_24+0x218>
  b4:	46 c3       	rjmp	.+1676   	; 0x742 <__vector_24+0xe2>
  b6:	e0 c3       	rjmp	.+1984   	; 0x878 <__vector_24+0x218>
  b8:	df c3       	rjmp	.+1982   	; 0x878 <__vector_24+0x218>
  ba:	de c3       	rjmp	.+1980   	; 0x878 <__vector_24+0x218>
  bc:	dd c3       	rjmp	.+1978   	; 0x878 <__vector_24+0x218>
  be:	dc c3       	rjmp	.+1976   	; 0x878 <__vector_24+0x218>
  c0:	db c3       	rjmp	.+1974   	; 0x878 <__vector_24+0x218>
  c2:	da c3       	rjmp	.+1972   	; 0x878 <__vector_24+0x218>
  c4:	20 c3       	rjmp	.+1600   	; 0x706 <__vector_24+0xa6>
  c6:	d8 c3       	rjmp	.+1968   	; 0x878 <__vector_24+0x218>
  c8:	d7 c3       	rjmp	.+1966   	; 0x878 <__vector_24+0x218>
  ca:	d6 c3       	rjmp	.+1964   	; 0x878 <__vector_24+0x218>
  cc:	d5 c3       	rjmp	.+1962   	; 0x878 <__vector_24+0x218>
  ce:	d4 c3       	rjmp	.+1960   	; 0x878 <__vector_24+0x218>
  d0:	d3 c3       	rjmp	.+1958   	; 0x878 <__vector_24+0x218>
  d2:	d2 c3       	rjmp	.+1956   	; 0x878 <__vector_24+0x218>
  d4:	2a c3       	rjmp	.+1620   	; 0x72a <__vector_24+0xca>
  d6:	d0 c3       	rjmp	.+1952   	; 0x878 <__vector_24+0x218>
  d8:	cf c3       	rjmp	.+1950   	; 0x878 <__vector_24+0x218>
  da:	ce c3       	rjmp	.+1948   	; 0x878 <__vector_24+0x218>
  dc:	cd c3       	rjmp	.+1946   	; 0x878 <__vector_24+0x218>
  de:	cc c3       	rjmp	.+1944   	; 0x878 <__vector_24+0x218>
  e0:	cb c3       	rjmp	.+1942   	; 0x878 <__vector_24+0x218>
  e2:	ca c3       	rjmp	.+1940   	; 0x878 <__vector_24+0x218>
  e4:	04 c3       	rjmp	.+1544   	; 0x6ee <__vector_24+0x8e>
  e6:	c8 c3       	rjmp	.+1936   	; 0x878 <__vector_24+0x218>
  e8:	c7 c3       	rjmp	.+1934   	; 0x878 <__vector_24+0x218>
  ea:	c6 c3       	rjmp	.+1932   	; 0x878 <__vector_24+0x218>
  ec:	c5 c3       	rjmp	.+1930   	; 0x878 <__vector_24+0x218>
  ee:	c4 c3       	rjmp	.+1928   	; 0x878 <__vector_24+0x218>
  f0:	c3 c3       	rjmp	.+1926   	; 0x878 <__vector_24+0x218>
  f2:	c2 c3       	rjmp	.+1924   	; 0x878 <__vector_24+0x218>
  f4:	3e c3       	rjmp	.+1660   	; 0x772 <__vector_24+0x112>
  f6:	c0 c3       	rjmp	.+1920   	; 0x878 <__vector_24+0x218>
  f8:	bf c3       	rjmp	.+1918   	; 0x878 <__vector_24+0x218>
  fa:	be c3       	rjmp	.+1916   	; 0x878 <__vector_24+0x218>
  fc:	bd c3       	rjmp	.+1914   	; 0x878 <__vector_24+0x218>
  fe:	bc c3       	rjmp	.+1912   	; 0x878 <__vector_24+0x218>
 100:	bb c3       	rjmp	.+1910   	; 0x878 <__vector_24+0x218>
 102:	ba c3       	rjmp	.+1908   	; 0x878 <__vector_24+0x218>
 104:	36 c3       	rjmp	.+1644   	; 0x772 <__vector_24+0x112>
 106:	b8 c3       	rjmp	.+1904   	; 0x878 <__vector_24+0x218>
 108:	b7 c3       	rjmp	.+1902   	; 0x878 <__vector_24+0x218>
 10a:	b6 c3       	rjmp	.+1900   	; 0x878 <__vector_24+0x218>
 10c:	b5 c3       	rjmp	.+1898   	; 0x878 <__vector_24+0x218>
 10e:	b4 c3       	rjmp	.+1896   	; 0x878 <__vector_24+0x218>
 110:	b3 c3       	rjmp	.+1894   	; 0x878 <__vector_24+0x218>
 112:	b2 c3       	rjmp	.+1892   	; 0x878 <__vector_24+0x218>
 114:	2e c3       	rjmp	.+1628   	; 0x772 <__vector_24+0x112>
 116:	b0 c3       	rjmp	.+1888   	; 0x878 <__vector_24+0x218>
 118:	af c3       	rjmp	.+1886   	; 0x878 <__vector_24+0x218>
 11a:	ae c3       	rjmp	.+1884   	; 0x878 <__vector_24+0x218>
 11c:	ad c3       	rjmp	.+1882   	; 0x878 <__vector_24+0x218>
 11e:	ac c3       	rjmp	.+1880   	; 0x878 <__vector_24+0x218>
 120:	ab c3       	rjmp	.+1878   	; 0x878 <__vector_24+0x218>
 122:	aa c3       	rjmp	.+1876   	; 0x878 <__vector_24+0x218>
 124:	26 c3       	rjmp	.+1612   	; 0x772 <__vector_24+0x112>
 126:	a8 c3       	rjmp	.+1872   	; 0x878 <__vector_24+0x218>
 128:	a7 c3       	rjmp	.+1870   	; 0x878 <__vector_24+0x218>
 12a:	a6 c3       	rjmp	.+1868   	; 0x878 <__vector_24+0x218>
 12c:	a5 c3       	rjmp	.+1866   	; 0x878 <__vector_24+0x218>
 12e:	a4 c3       	rjmp	.+1864   	; 0x878 <__vector_24+0x218>
 130:	a3 c3       	rjmp	.+1862   	; 0x878 <__vector_24+0x218>
 132:	a2 c3       	rjmp	.+1860   	; 0x878 <__vector_24+0x218>
 134:	2a c3       	rjmp	.+1620   	; 0x78a <__vector_24+0x12a>
 136:	a0 c3       	rjmp	.+1856   	; 0x878 <__vector_24+0x218>
 138:	9f c3       	rjmp	.+1854   	; 0x878 <__vector_24+0x218>
 13a:	9e c3       	rjmp	.+1852   	; 0x878 <__vector_24+0x218>
 13c:	9d c3       	rjmp	.+1850   	; 0x878 <__vector_24+0x218>
 13e:	9c c3       	rjmp	.+1848   	; 0x878 <__vector_24+0x218>
 140:	9b c3       	rjmp	.+1846   	; 0x878 <__vector_24+0x218>
 142:	9a c3       	rjmp	.+1844   	; 0x878 <__vector_24+0x218>
 144:	3e c3       	rjmp	.+1660   	; 0x7c2 <__vector_24+0x162>
 146:	98 c3       	rjmp	.+1840   	; 0x878 <__vector_24+0x218>
 148:	97 c3       	rjmp	.+1838   	; 0x878 <__vector_24+0x218>
 14a:	96 c3       	rjmp	.+1836   	; 0x878 <__vector_24+0x218>
 14c:	95 c3       	rjmp	.+1834   	; 0x878 <__vector_24+0x218>
 14e:	94 c3       	rjmp	.+1832   	; 0x878 <__vector_24+0x218>
 150:	93 c3       	rjmp	.+1830   	; 0x878 <__vector_24+0x218>
 152:	92 c3       	rjmp	.+1828   	; 0x878 <__vector_24+0x218>
 154:	1a c3       	rjmp	.+1588   	; 0x78a <__vector_24+0x12a>
 156:	90 c3       	rjmp	.+1824   	; 0x878 <__vector_24+0x218>
 158:	8f c3       	rjmp	.+1822   	; 0x878 <__vector_24+0x218>
 15a:	8e c3       	rjmp	.+1820   	; 0x878 <__vector_24+0x218>
 15c:	8d c3       	rjmp	.+1818   	; 0x878 <__vector_24+0x218>
 15e:	8c c3       	rjmp	.+1816   	; 0x878 <__vector_24+0x218>
 160:	8b c3       	rjmp	.+1814   	; 0x878 <__vector_24+0x218>
 162:	8a c3       	rjmp	.+1812   	; 0x878 <__vector_24+0x218>
 164:	2e c3       	rjmp	.+1628   	; 0x7c2 <__vector_24+0x162>
 166:	88 c3       	rjmp	.+1808   	; 0x878 <__vector_24+0x218>
 168:	87 c3       	rjmp	.+1806   	; 0x878 <__vector_24+0x218>
 16a:	86 c3       	rjmp	.+1804   	; 0x878 <__vector_24+0x218>
 16c:	85 c3       	rjmp	.+1802   	; 0x878 <__vector_24+0x218>
 16e:	84 c3       	rjmp	.+1800   	; 0x878 <__vector_24+0x218>
 170:	83 c3       	rjmp	.+1798   	; 0x878 <__vector_24+0x218>
 172:	82 c3       	rjmp	.+1796   	; 0x878 <__vector_24+0x218>
 174:	2d c3       	rjmp	.+1626   	; 0x7d0 <__vector_24+0x170>
 176:	80 c3       	rjmp	.+1792   	; 0x878 <__vector_24+0x218>
 178:	7f c3       	rjmp	.+1790   	; 0x878 <__vector_24+0x218>
 17a:	7e c3       	rjmp	.+1788   	; 0x878 <__vector_24+0x218>
 17c:	7d c3       	rjmp	.+1786   	; 0x878 <__vector_24+0x218>
 17e:	7c c3       	rjmp	.+1784   	; 0x878 <__vector_24+0x218>
 180:	7b c3       	rjmp	.+1782   	; 0x878 <__vector_24+0x218>
 182:	7a c3       	rjmp	.+1780   	; 0x878 <__vector_24+0x218>
 184:	39 c3       	rjmp	.+1650   	; 0x7f8 <__vector_24+0x198>
 186:	78 c3       	rjmp	.+1776   	; 0x878 <__vector_24+0x218>
 188:	77 c3       	rjmp	.+1774   	; 0x878 <__vector_24+0x218>
 18a:	76 c3       	rjmp	.+1772   	; 0x878 <__vector_24+0x218>
 18c:	75 c3       	rjmp	.+1770   	; 0x878 <__vector_24+0x218>
 18e:	74 c3       	rjmp	.+1768   	; 0x878 <__vector_24+0x218>
 190:	73 c3       	rjmp	.+1766   	; 0x878 <__vector_24+0x218>
 192:	72 c3       	rjmp	.+1764   	; 0x878 <__vector_24+0x218>
 194:	31 c3       	rjmp	.+1634   	; 0x7f8 <__vector_24+0x198>
 196:	70 c3       	rjmp	.+1760   	; 0x878 <__vector_24+0x218>
 198:	6f c3       	rjmp	.+1758   	; 0x878 <__vector_24+0x218>
 19a:	6e c3       	rjmp	.+1756   	; 0x878 <__vector_24+0x218>
 19c:	6d c3       	rjmp	.+1754   	; 0x878 <__vector_24+0x218>
 19e:	6c c3       	rjmp	.+1752   	; 0x878 <__vector_24+0x218>
 1a0:	6b c3       	rjmp	.+1750   	; 0x878 <__vector_24+0x218>
 1a2:	6a c3       	rjmp	.+1748   	; 0x878 <__vector_24+0x218>
 1a4:	3a c3       	rjmp	.+1652   	; 0x81a <__vector_24+0x1ba>
 1a6:	68 c3       	rjmp	.+1744   	; 0x878 <__vector_24+0x218>
 1a8:	67 c3       	rjmp	.+1742   	; 0x878 <__vector_24+0x218>
 1aa:	66 c3       	rjmp	.+1740   	; 0x878 <__vector_24+0x218>
 1ac:	65 c3       	rjmp	.+1738   	; 0x878 <__vector_24+0x218>
 1ae:	64 c3       	rjmp	.+1736   	; 0x878 <__vector_24+0x218>
 1b0:	63 c3       	rjmp	.+1734   	; 0x878 <__vector_24+0x218>
 1b2:	62 c3       	rjmp	.+1732   	; 0x878 <__vector_24+0x218>
 1b4:	50 c3       	rjmp	.+1696   	; 0x856 <__vector_24+0x1f6>
 1b6:	60 c3       	rjmp	.+1728   	; 0x878 <__vector_24+0x218>
 1b8:	5f c3       	rjmp	.+1726   	; 0x878 <__vector_24+0x218>
 1ba:	5e c3       	rjmp	.+1724   	; 0x878 <__vector_24+0x218>
 1bc:	5d c3       	rjmp	.+1722   	; 0x878 <__vector_24+0x218>
 1be:	5c c3       	rjmp	.+1720   	; 0x878 <__vector_24+0x218>
 1c0:	5b c3       	rjmp	.+1718   	; 0x878 <__vector_24+0x218>
 1c2:	5a c3       	rjmp	.+1716   	; 0x878 <__vector_24+0x218>
 1c4:	48 c3       	rjmp	.+1680   	; 0x856 <__vector_24+0x1f6>

000001c6 <__ctors_end>:
 1c6:	11 24       	eor	r1, r1
 1c8:	1f be       	out	0x3f, r1	; 63
 1ca:	cf ef       	ldi	r28, 0xFF	; 255
 1cc:	d4 e0       	ldi	r29, 0x04	; 4
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
 1d2:	11 e0       	ldi	r17, 0x01	; 1
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b1 e0       	ldi	r27, 0x01	; 1
 1d8:	ec ec       	ldi	r30, 0xCC	; 204
 1da:	f8 e0       	ldi	r31, 0x08	; 8
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
 1de:	05 90       	lpm	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	a2 30       	cpi	r26, 0x02	; 2
 1e4:	b1 07       	cpc	r27, r17
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
 1e8:	11 e0       	ldi	r17, 0x01	; 1
 1ea:	a2 e0       	ldi	r26, 0x02	; 2
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
 1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
 1f2:	aa 31       	cpi	r26, 0x1A	; 26
 1f4:	b1 07       	cpc	r27, r17
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
 1f8:	a8 d0       	rcall	.+336    	; 0x34a <main>
 1fa:	66 c3       	rjmp	.+1740   	; 0x8c8 <_exit>

000001fc <__bad_interrupt>:
 1fc:	01 cf       	rjmp	.-510    	; 0x0 <__vectors>

000001fe <a2dOff>:
}

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 208:	80 81       	ld	r24, Z
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	80 83       	st	Z, r24
}
 20e:	08 95       	ret

00000210 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 210:	ea e7       	ldi	r30, 0x7A	; 122
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	98 7f       	andi	r25, 0xF8	; 248
 218:	89 2b       	or	r24, r25
 21a:	80 83       	st	Z, r24
}
 21c:	08 95       	ret

0000021e <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 21e:	ec e7       	ldi	r30, 0x7C	; 124
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	90 81       	ld	r25, Z
 224:	82 95       	swap	r24
 226:	88 0f       	add	r24, r24
 228:	88 0f       	add	r24, r24
 22a:	80 7c       	andi	r24, 0xC0	; 192
 22c:	9f 73       	andi	r25, 0x3F	; 63
 22e:	98 2b       	or	r25, r24
 230:	90 83       	st	Z, r25
}
 232:	08 95       	ret

00000234 <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 238:	ca e7       	ldi	r28, 0x7A	; 122
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	88 81       	ld	r24, Y
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	88 83       	st	Y, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
 242:	88 81       	ld	r24, Y
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	88 83       	st	Y, r24
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	e2 df       	rcall	.-60     	; 0x210 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);	// set default reference
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	e7 df       	rcall	.-50     	; 0x21e <a2dSetReference>
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 250:	ec e7       	ldi	r30, 0x7C	; 124
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
 25a:	88 81       	ld	r24, Y
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	88 83       	st	Y, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 260:	10 92 0f 01 	sts	0x010F, r1
	sei();							// turn on interrupts (if not already on)
 264:	78 94       	sei
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <a2dSetChannel>:
}

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 26c:	ec e7       	ldi	r30, 0x7C	; 124
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	8f 71       	andi	r24, 0x1F	; 31
 274:	90 7e       	andi	r25, 0xE0	; 224
 276:	98 2b       	or	r25, r24
 278:	90 83       	st	Z, r25
}
 27a:	08 95       	ret

0000027c <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 27c:	ea e7       	ldi	r30, 0x7A	; 122
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 61       	ori	r24, 0x10	; 16
 284:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
}
 28c:	08 95       	ret

0000028e <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
 28e:	80 91 7a 00 	lds	r24, 0x007A
}
 292:	80 74       	andi	r24, 0x40	; 64
 294:	08 95       	ret

00000296 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 296:	10 92 0f 01 	sts	0x010F, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 29a:	ec e7       	ldi	r30, 0x7C	; 124
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	90 81       	ld	r25, Z
 2a0:	8f 71       	andi	r24, 0x1F	; 31
 2a2:	90 7e       	andi	r25, 0xE0	; 224
 2a4:	98 2b       	or	r25, r24
 2a6:	90 83       	st	Z, r25
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);						// start conversion
 2b2:	80 81       	ld	r24, Z
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	80 83       	st	Z, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 2b8:	80 81       	ld	r24, Z
 2ba:	86 fd       	sbrc	r24, 6
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <a2dConvert10bit+0x22>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 2be:	20 91 78 00 	lds	r18, 0x0078
 2c2:	30 91 79 00 	lds	r19, 0x0079
 2c6:	93 2f       	mov	r25, r19
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	28 2b       	or	r18, r24
 2ce:	39 2b       	or	r19, r25
}
 2d0:	82 2f       	mov	r24, r18
 2d2:	93 2f       	mov	r25, r19
 2d4:	08 95       	ret

000002d6 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 2d6:	df df       	rcall	.-66     	; 0x296 <a2dConvert10bit>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
}
 2e0:	08 95       	ret

000002e2 <__vector_21>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 0f 01 	sts	0x010F, r24
}
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <i2cSlaveReceiveService>:
*/
void i2cSlaveReceiveService(u08 receiveDataLength, u08* receiveData) 
{ 

#ifdef DEBUG
	PORTB ^= (1<<PB0);
 300:	95 b1       	in	r25, 0x05	; 5
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	89 27       	eor	r24, r25
 306:	85 b9       	out	0x05, r24	; 5
#endif
	u08 command = receiveData[0];
 308:	fb 01       	movw	r30, r22
 30a:	80 81       	ld	r24, Z
	if( command < 0x40 ) {
 30c:	80 34       	cpi	r24, 0x40	; 64
 30e:	b0 f4       	brcc	.+44     	; 0x33c <i2cSlaveReceiveService+0x3c>
		command -= 0x30;
 310:	80 53       	subi	r24, 0x30	; 48
		u08 channel = command >> 1;
 312:	e8 2f       	mov	r30, r24
 314:	e6 95       	lsr	r30
		if( command & 0b00000001 ) {
 316:	80 ff       	sbrs	r24, 0
 318:	09 c0       	rjmp	.+18     	; 0x32c <i2cSlaveReceiveService+0x2c>
			localBuffer[0] = (u08)A2D[channel];
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	e0 5f       	subi	r30, 0xF0	; 240
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	80 93 18 01 	sts	0x0118, r24
 32a:	08 95       	ret
		}
		else {
			localBuffer[0] = (u08)(A2D[channel]>>8);
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e0 5f       	subi	r30, 0xF0	; 240
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	81 81       	ldd	r24, Z+1	; 0x01
 338:	80 93 18 01 	sts	0x0118, r24
 33c:	08 95       	ret

0000033e <i2cSlaveTransmitService>:

//	this function is called when a master on the bus addresses and wishes
//	to read data
u08 i2cSlaveTransmitService(u08 transmitDataLengthMax, u08* transmitData)
{
	transmitData[0] = localBuffer[0];
 33e:	80 91 18 01 	lds	r24, 0x0118
 342:	fb 01       	movw	r30, r22
 344:	80 83       	st	Z, r24
	return 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret

0000034a <main>:

//	function prototypes
void i2cSlaveReceiveService(u08 receiveDataLength, u08* receiveData);
u08 i2cSlaveTransmitService(u08 transmitDataLengthMax, u08* transmitData);

int main(void) {
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
#ifdef DEBUG
	DDRB |= (1<<PB0);
 352:	20 9a       	sbi	0x04, 0	; 4
#endif
	i2cInit();
 354:	39 d0       	rcall	.+114    	; 0x3c8 <i2cInit>
	i2cSetLocalDeviceAddr(LOCAL_I2C_ADDR,0);
 356:	8c e4       	ldi	r24, 0x4C	; 76
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	54 d0       	rcall	.+168    	; 0x404 <i2cSetLocalDeviceAddr>
	i2cSetSlaveReceiveHandler(i2cSlaveReceiveService);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	5a d0       	rcall	.+180    	; 0x416 <i2cSetSlaveReceiveHandler>
	i2cSetSlaveTransmitHandler(i2cSlaveTransmitService);
 362:	8f e9       	ldi	r24, 0x9F	; 159
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	5c d0       	rcall	.+184    	; 0x420 <i2cSetSlaveTransmitHandler>
	
	a2dInit();
 368:	65 df       	rcall	.-310    	; 0x234 <a2dInit>
	a2dSetReference(ADC_REFERENCE_AVCC);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	58 df       	rcall	.-336    	; 0x21e <a2dSetReference>
	
	//	main loop reads the ADC's in a round-robin fashion
	u08 current_adc = 0;
 36e:	10 e0       	ldi	r17, 0x00	; 0
    while(1) {
        A2D[current_adc] = a2dConvert10bit(current_adc);
 370:	c0 e1       	ldi	r28, 0x10	; 16
 372:	d1 e0       	ldi	r29, 0x01	; 1
        current_adc++;
        if( current_adc > 3 ) {
        	current_adc = 0;
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	01 c0       	rjmp	.+2      	; 0x37a <main+0x30>
 378:	10 2f       	mov	r17, r16
	a2dSetReference(ADC_REFERENCE_AVCC);
	
	//	main loop reads the ADC's in a round-robin fashion
	u08 current_adc = 0;
    while(1) {
        A2D[current_adc] = a2dConvert10bit(current_adc);
 37a:	81 2f       	mov	r24, r17
 37c:	8c df       	rcall	.-232    	; 0x296 <a2dConvert10bit>
 37e:	e1 2f       	mov	r30, r17
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	ec 0f       	add	r30, r28
 388:	fd 1f       	adc	r31, r29
 38a:	91 83       	std	Z+1, r25	; 0x01
 38c:	80 83       	st	Z, r24
        current_adc++;
 38e:	1f 5f       	subi	r17, 0xFF	; 255
        if( current_adc > 3 ) {
 390:	14 30       	cpi	r17, 0x04	; 4
 392:	90 f7       	brcc	.-28     	; 0x378 <main+0x2e>
 394:	f2 cf       	rjmp	.-28     	; 0x37a <main+0x30>

00000396 <i2cSetBitrate>:
	// enable interrupts
	sei();
}

void i2cSetBitrate(u16 bitrateKHz)
{
 396:	bc 01       	movw	r22, r24
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
 398:	e9 eb       	ldi	r30, 0xB9	; 185
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8e 7f       	andi	r24, 0xFE	; 254
 3a0:	80 83       	st	Z, r24
		cbi(TWSR, TWPS1);
 3a2:	80 81       	ld	r24, Z
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	80 83       	st	Z, r24
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
 3a8:	80 e4       	ldi	r24, 0x40	; 64
 3aa:	9f e1       	ldi	r25, 0x1F	; 31
 3ac:	79 d2       	rcall	.+1266   	; 0x8a0 <__udivmodhi4>
	if(bitrate_div >= 16)
 3ae:	60 31       	cpi	r22, 0x10	; 16
 3b0:	40 f0       	brcs	.+16     	; 0x3c2 <i2cSetBitrate+0x2c>
		bitrate_div = (bitrate_div-16)/2;
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	60 51       	subi	r22, 0x10	; 16
 3b6:	70 40       	sbci	r23, 0x00	; 0
 3b8:	12 f4       	brpl	.+4      	; 0x3be <i2cSetBitrate+0x28>
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	75 95       	asr	r23
 3c0:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
 3c2:	60 93 b8 00 	sts	0x00B8, r22
}
 3c6:	08 95       	ret

000003c8 <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 0);	// i2c SCL on ATmega163,323,16,32,etc
 3c8:	40 9a       	sbi	0x08, 0	; 8
	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
 3ca:	41 9a       	sbi	0x08, 1	; 8
	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
 3cc:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on ATmega128,64
 3ce:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
 3d0:	10 92 0c 01 	sts	0x010C, r1
 3d4:	10 92 0b 01 	sts	0x010B, r1
	i2cSlaveTransmit = 0;
 3d8:	10 92 0e 01 	sts	0x010E, r1
 3dc:	10 92 0d 01 	sts	0x010D, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
 3e0:	84 e6       	ldi	r24, 0x64	; 100
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	d8 df       	rcall	.-80     	; 0x396 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 3e6:	ec eb       	ldi	r30, 0xBC	; 188
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	84 60       	ori	r24, 0x04	; 4
 3ee:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
 3f0:	10 92 02 01 	sts	0x0102, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 3f4:	80 81       	ld	r24, Z
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 3fa:	80 81       	ld	r24, Z
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
 400:	78 94       	sei
}
 402:	08 95       	ret

00000404 <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	66 23       	and	r22, r22
 408:	09 f4       	brne	.+2      	; 0x40c <i2cSetLocalDeviceAddr+0x8>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	8e 7f       	andi	r24, 0xFE	; 254
 40e:	98 2b       	or	r25, r24
 410:	90 93 ba 00 	sts	0x00BA, r25
}
 414:	08 95       	ret

00000416 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
 416:	90 93 0c 01 	sts	0x010C, r25
 41a:	80 93 0b 01 	sts	0x010B, r24
}
 41e:	08 95       	ret

00000420 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
 420:	90 93 0e 01 	sts	0x010E, r25
 424:	80 93 0d 01 	sts	0x010D, r24
}
 428:	08 95       	ret

0000042a <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 42a:	ec eb       	ldi	r30, 0xBC	; 188
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	80 6a       	ori	r24, 0xA0	; 160
 434:	80 83       	st	Z, r24
}
 436:	08 95       	ret

00000438 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 438:	ec eb       	ldi	r30, 0xBC	; 188
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	8f 70       	andi	r24, 0x0F	; 15
 440:	80 6d       	ori	r24, 0xD0	; 208
 442:	80 83       	st	Z, r24
}
 444:	08 95       	ret

00000446 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 446:	ec eb       	ldi	r30, 0xBC	; 188
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	88 23       	and	r24, r24
 44e:	ec f7       	brge	.-6      	; 0x44a <i2cWaitForComplete+0x4>
}
 450:	08 95       	ret

00000452 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 452:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 456:	ec eb       	ldi	r30, 0xBC	; 188
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	8f 70       	andi	r24, 0x0F	; 15
 45e:	80 68       	ori	r24, 0x80	; 128
 460:	80 83       	st	Z, r24
}
 462:	08 95       	ret

00000464 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
 464:	88 23       	and	r24, r24
 466:	39 f0       	breq	.+14     	; 0x476 <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 468:	ec eb       	ldi	r30, 0xBC	; 188
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	80 6c       	ori	r24, 0xC0	; 192
 472:	80 83       	st	Z, r24
 474:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 476:	ec eb       	ldi	r30, 0xBC	; 188
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8f 70       	andi	r24, 0x0F	; 15
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	80 83       	st	Z, r24
 482:	08 95       	ret

00000484 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 484:	80 91 bb 00 	lds	r24, 0x00BB
}
 488:	08 95       	ret

0000048a <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
 48a:	80 91 b9 00 	lds	r24, 0x00B9
}
 48e:	08 95       	ret

00000490 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 490:	90 91 02 01 	lds	r25, 0x0102
 494:	99 23       	and	r25, r25
 496:	e1 f7       	brne	.-8      	; 0x490 <i2cMasterSend>
	// set state
	I2cState = I2C_MASTER_TX;
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	90 93 02 01 	sts	0x0102, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
 49e:	8e 7f       	andi	r24, 0xFE	; 254
 4a0:	80 93 03 01 	sts	0x0103, r24
	for(i=0; i<length; i++)
 4a4:	66 23       	and	r22, r22
 4a6:	79 f0       	breq	.+30     	; 0x4c6 <i2cMasterSend+0x36>
 4a8:	a4 2f       	mov	r26, r20
 4aa:	b5 2f       	mov	r27, r21
 4ac:	e6 e0       	ldi	r30, 0x06	; 6
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
 4b0:	cf 01       	movw	r24, r30
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	26 2f       	mov	r18, r22
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	82 0f       	add	r24, r18
 4ba:	91 1d       	adc	r25, r1
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
 4bc:	2d 91       	ld	r18, X+
 4be:	21 93       	st	Z+, r18
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
 4c0:	e8 17       	cp	r30, r24
 4c2:	f9 07       	cpc	r31, r25
 4c4:	d9 f7       	brne	.-10     	; 0x4bc <i2cMasterSend+0x2c>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
 4c6:	10 92 04 01 	sts	0x0104, r1
	I2cSendDataLength = length;
 4ca:	60 93 05 01 	sts	0x0105, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 4ce:	ec eb       	ldi	r30, 0xBC	; 188
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	8f 70       	andi	r24, 0x0F	; 15
 4d6:	80 6a       	ori	r24, 0xA0	; 160
 4d8:	80 83       	st	Z, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
 4da:	08 95       	ret

000004dc <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
 4dc:	da 01       	movw	r26, r20
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 4de:	90 91 02 01 	lds	r25, 0x0102
 4e2:	99 23       	and	r25, r25
 4e4:	e1 f7       	brne	.-8      	; 0x4de <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	90 93 02 01 	sts	0x0102, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	80 93 03 01 	sts	0x0103, r24
	I2cReceiveDataIndex = 0;
 4f2:	10 92 07 01 	sts	0x0107, r1
	I2cReceiveDataLength = length;
 4f6:	60 93 0a 01 	sts	0x010A, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 4fa:	ec eb       	ldi	r30, 0xBC	; 188
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	8f 70       	andi	r24, 0x0F	; 15
 502:	80 6a       	ori	r24, 0xA0	; 160
 504:	80 83       	st	Z, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
 506:	80 91 02 01 	lds	r24, 0x0102
 50a:	88 23       	and	r24, r24
 50c:	e1 f7       	brne	.-8      	; 0x506 <__stack+0x7>
	// return data
	for(i=0; i<length; i++)
 50e:	66 23       	and	r22, r22
 510:	61 f0       	breq	.+24     	; 0x52a <__stack+0x2b>
 512:	e8 e0       	ldi	r30, 0x08	; 8
 514:	f1 e0       	ldi	r31, 0x01	; 1
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
 516:	cf 01       	movw	r24, r30
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	61 50       	subi	r22, 0x01	; 1
 51c:	86 0f       	add	r24, r22
 51e:	91 1d       	adc	r25, r1
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
 520:	21 91       	ld	r18, Z+
 522:	2d 93       	st	X+, r18
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
 524:	e8 17       	cp	r30, r24
 526:	f9 07       	cpc	r31, r25
 528:	d9 f7       	brne	.-10     	; 0x520 <__stack+0x21>
 52a:	08 95       	ret

0000052c <i2cMasterSendNI>:
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	da 01       	movw	r26, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 532:	ec eb       	ldi	r30, 0xBC	; 188
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	90 81       	ld	r25, Z
 538:	9e 7f       	andi	r25, 0xFE	; 254
 53a:	90 83       	st	Z, r25
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 53c:	90 81       	ld	r25, Z
 53e:	9f 70       	andi	r25, 0x0F	; 15
 540:	90 6a       	ori	r25, 0xA0	; 160
 542:	90 83       	st	Z, r25
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 544:	90 81       	ld	r25, Z
 546:	99 23       	and	r25, r25
 548:	ec f7       	brge	.-6      	; 0x544 <i2cMasterSendNI+0x18>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
 54a:	8e 7f       	andi	r24, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 54c:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 550:	ec eb       	ldi	r30, 0xBC	; 188
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	8f 70       	andi	r24, 0x0F	; 15
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 55c:	80 81       	ld	r24, Z
 55e:	88 23       	and	r24, r24
 560:	ec f7       	brge	.-6      	; 0x55c <i2cMasterSendNI+0x30>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
 562:	80 91 b9 00 	lds	r24, 0x00B9
 566:	88 31       	cpi	r24, 0x18	; 24
 568:	99 f4       	brne	.+38     	; 0x590 <i2cMasterSendNI+0x64>
	{
		// send data
		while(length)
 56a:	66 23       	and	r22, r22
 56c:	99 f0       	breq	.+38     	; 0x594 <i2cMasterSendNI+0x68>
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 56e:	cb eb       	ldi	r28, 0xBB	; 187
 570:	d0 e0       	ldi	r29, 0x00	; 0
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 572:	ec eb       	ldi	r30, 0xBC	; 188
 574:	f0 e0       	ldi	r31, 0x00	; 0
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
 576:	8d 91       	ld	r24, X+
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 578:	88 83       	st	Y, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 57a:	80 81       	ld	r24, Z
 57c:	8f 70       	andi	r24, 0x0F	; 15
 57e:	80 68       	ori	r24, 0x80	; 128
 580:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	ec f7       	brge	.-6      	; 0x582 <i2cMasterSendNI+0x56>
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
			i2cWaitForComplete();
			length--;
 588:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
 58a:	a9 f7       	brne	.-22     	; 0x576 <i2cMasterSendNI+0x4a>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	03 c0       	rjmp	.+6      	; 0x596 <i2cMasterSendNI+0x6a>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	01 c0       	rjmp	.+2      	; 0x596 <i2cMasterSendNI+0x6a>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 594:	80 e0       	ldi	r24, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 596:	ec eb       	ldi	r30, 0xBC	; 188
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	90 81       	ld	r25, Z
 59c:	9f 70       	andi	r25, 0x0F	; 15
 59e:	90 6d       	ori	r25, 0xD0	; 208
 5a0:	90 83       	st	Z, r25
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
 5a2:	90 81       	ld	r25, Z
 5a4:	94 ff       	sbrs	r25, 4
 5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <i2cMasterSendNI+0x76>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 5a8:	ec eb       	ldi	r30, 0xBC	; 188
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	90 81       	ld	r25, Z
 5ae:	91 60       	ori	r25, 0x01	; 1
 5b0:	90 83       	st	Z, r25

	return retval;
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 5bc:	ec eb       	ldi	r30, 0xBC	; 188
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	90 81       	ld	r25, Z
 5c2:	9e 7f       	andi	r25, 0xFE	; 254
 5c4:	90 83       	st	Z, r25
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 5c6:	90 81       	ld	r25, Z
 5c8:	9f 70       	andi	r25, 0x0F	; 15
 5ca:	90 6a       	ori	r25, 0xA0	; 160
 5cc:	90 83       	st	Z, r25
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 5ce:	90 81       	ld	r25, Z
 5d0:	99 23       	and	r25, r25
 5d2:	ec f7       	brge	.-6      	; 0x5ce <i2cMasterReceiveNI+0x16>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
 5d4:	81 60       	ori	r24, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 5d6:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 5da:	ec eb       	ldi	r30, 0xBC	; 188
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	8f 70       	andi	r24, 0x0F	; 15
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 5e6:	80 81       	ld	r24, Z
 5e8:	88 23       	and	r24, r24
 5ea:	ec f7       	brge	.-6      	; 0x5e6 <i2cMasterReceiveNI+0x2e>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
 5ec:	80 91 b9 00 	lds	r24, 0x00B9
 5f0:	80 34       	cpi	r24, 0x40	; 64
 5f2:	49 f5       	brne	.+82     	; 0x646 <i2cMasterReceiveNI+0x8e>
	{
		// accept receive data and ack it
		while(length > 1)
 5f4:	62 30       	cpi	r22, 0x02	; 2
 5f6:	c0 f0       	brcs	.+48     	; 0x628 <i2cMasterReceiveNI+0x70>
 5f8:	da 01       	movw	r26, r20
 5fa:	96 2f       	mov	r25, r22
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 5fc:	ec eb       	ldi	r30, 0xBC	; 188
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 600:	cb eb       	ldi	r28, 0xBB	; 187
 602:	d0 e0       	ldi	r29, 0x00	; 0
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 604:	80 81       	ld	r24, Z
 606:	8f 70       	andi	r24, 0x0F	; 15
 608:	80 6c       	ori	r24, 0xC0	; 192
 60a:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 60c:	80 81       	ld	r24, Z
 60e:	88 23       	and	r24, r24
 610:	ec f7       	brge	.-6      	; 0x60c <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 612:	88 81       	ld	r24, Y
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
 614:	8d 93       	st	X+, r24
			// decrement length
			length--;
 616:	91 50       	subi	r25, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
 618:	92 30       	cpi	r25, 0x02	; 2
 61a:	a0 f7       	brcc	.-24     	; 0x604 <i2cMasterReceiveNI+0x4c>
	sbi(TWCR, TWIE);

	return retval;
}

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
 61c:	62 50       	subi	r22, 0x02	; 2
 61e:	86 2f       	mov	r24, r22
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	01 96       	adiw	r24, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
 624:	48 0f       	add	r20, r24
 626:	59 1f       	adc	r21, r25
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 628:	ec eb       	ldi	r30, 0xBC	; 188
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8f 70       	andi	r24, 0x0F	; 15
 630:	80 68       	ori	r24, 0x80	; 128
 632:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 634:	80 81       	ld	r24, Z
 636:	88 23       	and	r24, r24
 638:	ec f7       	brge	.-6      	; 0x634 <i2cMasterReceiveNI+0x7c>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 63a:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
 63e:	fa 01       	movw	r30, r20
 640:	80 83       	st	Z, r24
	return retval;
}

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
	u08 retval = I2C_OK;
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	01 c0       	rjmp	.+2      	; 0x648 <i2cMasterReceiveNI+0x90>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 646:	81 e0       	ldi	r24, 0x01	; 1

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 648:	ec eb       	ldi	r30, 0xBC	; 188
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	90 81       	ld	r25, Z
 64e:	9f 70       	andi	r25, 0x0F	; 15
 650:	90 6d       	ori	r25, 0xD0	; 208
 652:	90 83       	st	Z, r25
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 654:	90 81       	ld	r25, Z
 656:	91 60       	ori	r25, 0x01	; 1
 658:	90 83       	st	Z, r25

	return retval;
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <__vector_24>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
 682:	e0 91 b9 00 	lds	r30, 0x00B9
 686:	e8 7f       	andi	r30, 0xF8	; 248

	switch(status)
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	e9 3c       	cpi	r30, 0xC9	; 201
 68c:	f1 05       	cpc	r31, r1
 68e:	08 f0       	brcs	.+2      	; 0x692 <__vector_24+0x32>
 690:	f3 c0       	rjmp	.+486    	; 0x878 <__vector_24+0x218>
 692:	e6 5e       	subi	r30, 0xE6	; 230
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	09 94       	ijmp
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
 698:	80 91 03 01 	lds	r24, 0x0103
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 69c:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 6a0:	ec eb       	ldi	r30, 0xBC	; 188
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	8f 70       	andi	r24, 0x0F	; 15
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 83       	st	Z, r24
 6ac:	e5 c0       	rjmp	.+458    	; 0x878 <__vector_24+0x218>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
 6ae:	80 91 04 01 	lds	r24, 0x0104
 6b2:	90 91 05 01 	lds	r25, 0x0105
 6b6:	89 17       	cp	r24, r25
 6b8:	88 f4       	brcc	.+34     	; 0x6dc <__vector_24+0x7c>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
 6ba:	e8 2f       	mov	r30, r24
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	ea 5f       	subi	r30, 0xFA	; 250
 6c0:	fe 4f       	sbci	r31, 0xFE	; 254
 6c2:	90 81       	ld	r25, Z
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	80 93 04 01 	sts	0x0104, r24
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 6ca:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 6ce:	ec eb       	ldi	r30, 0xBC	; 188
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	8f 70       	andi	r24, 0x0F	; 15
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	80 83       	st	Z, r24
 6da:	ce c0       	rjmp	.+412    	; 0x878 <__vector_24+0x218>

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 6dc:	ec eb       	ldi	r30, 0xBC	; 188
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	8f 70       	andi	r24, 0x0F	; 15
 6e4:	80 6d       	ori	r24, 0xD0	; 208
 6e6:	80 83       	st	Z, r24
		else
		{
			// transmit stop condition, enable SLA ACK
			i2cSendStop();
			// set state
			I2cState = I2C_IDLE;
 6e8:	10 92 02 01 	sts	0x0102, r1
 6ec:	c5 c0       	rjmp	.+394    	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 6ee:	80 91 07 01 	lds	r24, 0x0107
 6f2:	90 91 bb 00 	lds	r25, 0x00BB
 6f6:	e8 2f       	mov	r30, r24
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	e8 5f       	subi	r30, 0xF8	; 248
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	90 83       	st	Z, r25
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	80 93 07 01 	sts	0x0107, r24

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 706:	ec eb       	ldi	r30, 0xBC	; 188
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	8f 70       	andi	r24, 0x0F	; 15
 70e:	80 6d       	ori	r24, 0xD0	; 208
 710:	80 83       	st	Z, r24
		rprintfInit(uart1SendByte);
		#endif
		// transmit stop condition, enable SLA ACK
		i2cSendStop();
		// set state
		I2cState = I2C_IDLE;
 712:	10 92 02 01 	sts	0x0102, r1
		break;
 716:	b0 c0       	rjmp	.+352    	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 718:	ec eb       	ldi	r30, 0xBC	; 188
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	8f 70       	andi	r24, 0x0F	; 15
 720:	80 68       	ori	r24, 0x80	; 128
 722:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 724:	10 92 02 01 	sts	0x0102, r1
		// release bus and transmit start when bus is free
		//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
		break;
 728:	a7 c0       	rjmp	.+334    	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 72a:	80 91 07 01 	lds	r24, 0x0107
 72e:	90 91 bb 00 	lds	r25, 0x00BB
 732:	e8 2f       	mov	r30, r24
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	e8 5f       	subi	r30, 0xF8	; 248
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	90 83       	st	Z, r25
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	80 93 07 01 	sts	0x0107, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
 742:	20 91 07 01 	lds	r18, 0x0107
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	80 91 0a 01 	lds	r24, 0x010A
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	28 17       	cp	r18, r24
 752:	39 07       	cpc	r19, r25
 754:	3c f4       	brge	.+14     	; 0x764 <__vector_24+0x104>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 756:	ec eb       	ldi	r30, 0xBC	; 188
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	8f 70       	andi	r24, 0x0F	; 15
 75e:	80 6c       	ori	r24, 0xC0	; 192
 760:	80 83       	st	Z, r24
 762:	8a c0       	rjmp	.+276    	; 0x878 <__vector_24+0x218>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 764:	ec eb       	ldi	r30, 0xBC	; 188
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	8f 70       	andi	r24, 0x0F	; 15
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	80 83       	st	Z, r24
 770:	83 c0       	rjmp	.+262    	; 0x878 <__vector_24+0x218>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
 772:	85 e0       	ldi	r24, 0x05	; 5
 774:	80 93 02 01 	sts	0x0102, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
 778:	10 92 07 01 	sts	0x0107, r1
		// receive data byte and return ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 77c:	ec eb       	ldi	r30, 0xBC	; 188
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	8f 70       	andi	r24, 0x0F	; 15
 784:	80 6c       	ori	r24, 0xC0	; 192
 786:	80 83       	st	Z, r24
		break;
 788:	77 c0       	rjmp	.+238    	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 78a:	80 91 07 01 	lds	r24, 0x0107
 78e:	90 91 bb 00 	lds	r25, 0x00BB
 792:	e8 2f       	mov	r30, r24
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	e8 5f       	subi	r30, 0xF8	; 248
 798:	fe 4f       	sbci	r31, 0xFE	; 254
 79a:	90 83       	st	Z, r25
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	80 93 07 01 	sts	0x0107, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
 7a2:	82 30       	cpi	r24, 0x02	; 2
 7a4:	38 f4       	brcc	.+14     	; 0x7b4 <__vector_24+0x154>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 7a6:	ec eb       	ldi	r30, 0xBC	; 188
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	8f 70       	andi	r24, 0x0F	; 15
 7ae:	80 6c       	ori	r24, 0xC0	; 192
 7b0:	80 83       	st	Z, r24
 7b2:	62 c0       	rjmp	.+196    	; 0x878 <__vector_24+0x218>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 7b4:	ec eb       	ldi	r30, 0xBC	; 188
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	8f 70       	andi	r24, 0x0F	; 15
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	80 83       	st	Z, r24
 7c0:	5b c0       	rjmp	.+182    	; 0x878 <__vector_24+0x218>
 7c2:	ec eb       	ldi	r30, 0xBC	; 188
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	8f 70       	andi	r24, 0x0F	; 15
 7ca:	80 68       	ori	r24, 0x80	; 128
 7cc:	80 83       	st	Z, r24
 7ce:	54 c0       	rjmp	.+168    	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 7d0:	ec eb       	ldi	r30, 0xBC	; 188
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	8f 70       	andi	r24, 0x0F	; 15
 7d8:	80 6c       	ori	r24, 0xC0	; 192
 7da:	80 83       	st	Z, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
 7dc:	e0 91 0b 01 	lds	r30, 0x010B
 7e0:	f0 91 0c 01 	lds	r31, 0x010C
 7e4:	30 97       	sbiw	r30, 0x00	; 0
 7e6:	29 f0       	breq	.+10     	; 0x7f2 <__vector_24+0x192>
 7e8:	80 91 07 01 	lds	r24, 0x0107
 7ec:	68 e0       	ldi	r22, 0x08	; 8
 7ee:	71 e0       	ldi	r23, 0x01	; 1
 7f0:	09 95       	icall
		// set state
		I2cState = I2C_IDLE;
 7f2:	10 92 02 01 	sts	0x0102, r1
		break;
 7f6:	40 c0       	rjmp	.+128    	; 0x878 <__vector_24+0x218>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
 7f8:	84 e0       	ldi	r24, 0x04	; 4
 7fa:	80 93 02 01 	sts	0x0102, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
 7fe:	e0 91 0d 01 	lds	r30, 0x010D
 802:	f0 91 0e 01 	lds	r31, 0x010E
 806:	30 97       	sbiw	r30, 0x00	; 0
 808:	31 f0       	breq	.+12     	; 0x816 <__vector_24+0x1b6>
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	66 e0       	ldi	r22, 0x06	; 6
 80e:	71 e0       	ldi	r23, 0x01	; 1
 810:	09 95       	icall
 812:	80 93 05 01 	sts	0x0105, r24
		// reset data index
		I2cSendDataIndex = 0;
 816:	10 92 04 01 	sts	0x0104, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
 81a:	80 91 04 01 	lds	r24, 0x0104
 81e:	e8 2f       	mov	r30, r24
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	ea 5f       	subi	r30, 0xFA	; 250
 824:	fe 4f       	sbci	r31, 0xFE	; 254
 826:	90 81       	ld	r25, Z
 828:	90 93 bb 00 	sts	0x00BB, r25
 82c:	8f 5f       	subi	r24, 0xFF	; 255
 82e:	80 93 04 01 	sts	0x0104, r24
		if(I2cSendDataIndex < I2cSendDataLength)
 832:	90 91 05 01 	lds	r25, 0x0105
 836:	89 17       	cp	r24, r25
 838:	38 f4       	brcc	.+14     	; 0x848 <__vector_24+0x1e8>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 83a:	ec eb       	ldi	r30, 0xBC	; 188
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	8f 70       	andi	r24, 0x0F	; 15
 842:	80 6c       	ori	r24, 0xC0	; 192
 844:	80 83       	st	Z, r24
 846:	18 c0       	rjmp	.+48     	; 0x878 <__vector_24+0x218>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 848:	ec eb       	ldi	r30, 0xBC	; 188
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	8f 70       	andi	r24, 0x0F	; 15
 850:	80 68       	ori	r24, 0x80	; 128
 852:	80 83       	st	Z, r24
 854:	11 c0       	rjmp	.+34     	; 0x878 <__vector_24+0x218>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 856:	ec eb       	ldi	r30, 0xBC	; 188
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	8f 70       	andi	r24, 0x0F	; 15
 85e:	80 6c       	ori	r24, 0xC0	; 192
 860:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 862:	10 92 02 01 	sts	0x0102, r1
		break;
 866:	08 c0       	rjmp	.+16     	; 0x878 <__vector_24+0x218>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
 868:	ec eb       	ldi	r30, 0xBC	; 188
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	8f 70       	andi	r24, 0x0F	; 15
 870:	80 6d       	ori	r24, 0xD0	; 208
 872:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 874:	10 92 02 01 	sts	0x0102, r1
		break;
	}
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
 89a:	80 91 02 01 	lds	r24, 0x0102
}
 89e:	08 95       	ret

000008a0 <__udivmodhi4>:
 8a0:	aa 1b       	sub	r26, r26
 8a2:	bb 1b       	sub	r27, r27
 8a4:	51 e1       	ldi	r21, 0x11	; 17
 8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <__udivmodhi4_ep>

000008a8 <__udivmodhi4_loop>:
 8a8:	aa 1f       	adc	r26, r26
 8aa:	bb 1f       	adc	r27, r27
 8ac:	a6 17       	cp	r26, r22
 8ae:	b7 07       	cpc	r27, r23
 8b0:	10 f0       	brcs	.+4      	; 0x8b6 <__udivmodhi4_ep>
 8b2:	a6 1b       	sub	r26, r22
 8b4:	b7 0b       	sbc	r27, r23

000008b6 <__udivmodhi4_ep>:
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	5a 95       	dec	r21
 8bc:	a9 f7       	brne	.-22     	; 0x8a8 <__udivmodhi4_loop>
 8be:	80 95       	com	r24
 8c0:	90 95       	com	r25
 8c2:	bc 01       	movw	r22, r24
 8c4:	cd 01       	movw	r24, r26
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
