
ATM8_I2C_SLAVE_TEST_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008f0  000009a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800102  00800102  000009a6  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000075c  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000010c  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000060  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000310  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d33  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000493  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b65  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000220  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000669  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000049d  00000000  00000000  00003b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000000a1  00000000  00000000  00003fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00004077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__ctors_end>
   2:	fc c0       	rjmp	.+504    	; 0x1fc <__bad_interrupt>
   4:	fb c0       	rjmp	.+502    	; 0x1fc <__bad_interrupt>
   6:	fa c0       	rjmp	.+500    	; 0x1fc <__bad_interrupt>
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__bad_interrupt>
   a:	f8 c0       	rjmp	.+496    	; 0x1fc <__bad_interrupt>
   c:	f7 c0       	rjmp	.+494    	; 0x1fc <__bad_interrupt>
   e:	f6 c0       	rjmp	.+492    	; 0x1fc <__bad_interrupt>
  10:	f5 c0       	rjmp	.+490    	; 0x1fc <__bad_interrupt>
  12:	f4 c0       	rjmp	.+488    	; 0x1fc <__bad_interrupt>
  14:	f3 c0       	rjmp	.+486    	; 0x1fc <__bad_interrupt>
  16:	f2 c0       	rjmp	.+484    	; 0x1fc <__bad_interrupt>
  18:	f1 c0       	rjmp	.+482    	; 0x1fc <__bad_interrupt>
  1a:	f0 c0       	rjmp	.+480    	; 0x1fc <__bad_interrupt>
  1c:	ef c0       	rjmp	.+478    	; 0x1fc <__bad_interrupt>
  1e:	ee c0       	rjmp	.+476    	; 0x1fc <__bad_interrupt>
  20:	ed c0       	rjmp	.+474    	; 0x1fc <__bad_interrupt>
  22:	ec c0       	rjmp	.+472    	; 0x1fc <__bad_interrupt>
  24:	eb c0       	rjmp	.+470    	; 0x1fc <__bad_interrupt>
  26:	ea c0       	rjmp	.+468    	; 0x1fc <__bad_interrupt>
  28:	e9 c0       	rjmp	.+466    	; 0x1fc <__bad_interrupt>
  2a:	5b c1       	rjmp	.+694    	; 0x2e2 <__vector_21>
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__bad_interrupt>
  2e:	e6 c0       	rjmp	.+460    	; 0x1fc <__bad_interrupt>
  30:	22 c3       	rjmp	.+1604   	; 0x676 <__vector_24>
  32:	e4 c0       	rjmp	.+456    	; 0x1fc <__bad_interrupt>
  34:	23 c4       	rjmp	.+2118   	; 0x87c <__vector_24+0x206>
  36:	2a c4       	rjmp	.+2132   	; 0x88c <__vector_24+0x216>
  38:	29 c4       	rjmp	.+2130   	; 0x88c <__vector_24+0x216>
  3a:	28 c4       	rjmp	.+2128   	; 0x88c <__vector_24+0x216>
  3c:	27 c4       	rjmp	.+2126   	; 0x88c <__vector_24+0x216>
  3e:	26 c4       	rjmp	.+2124   	; 0x88c <__vector_24+0x216>
  40:	25 c4       	rjmp	.+2122   	; 0x88c <__vector_24+0x216>
  42:	24 c4       	rjmp	.+2120   	; 0x88c <__vector_24+0x216>
  44:	34 c3       	rjmp	.+1640   	; 0x6ae <__vector_24+0x38>
  46:	22 c4       	rjmp	.+2116   	; 0x88c <__vector_24+0x216>
  48:	21 c4       	rjmp	.+2114   	; 0x88c <__vector_24+0x216>
  4a:	20 c4       	rjmp	.+2112   	; 0x88c <__vector_24+0x216>
  4c:	1f c4       	rjmp	.+2110   	; 0x88c <__vector_24+0x216>
  4e:	1e c4       	rjmp	.+2108   	; 0x88c <__vector_24+0x216>
  50:	1d c4       	rjmp	.+2106   	; 0x88c <__vector_24+0x216>
  52:	1c c4       	rjmp	.+2104   	; 0x88c <__vector_24+0x216>
  54:	2c c3       	rjmp	.+1624   	; 0x6ae <__vector_24+0x38>
  56:	1a c4       	rjmp	.+2100   	; 0x88c <__vector_24+0x216>
  58:	19 c4       	rjmp	.+2098   	; 0x88c <__vector_24+0x216>
  5a:	18 c4       	rjmp	.+2096   	; 0x88c <__vector_24+0x216>
  5c:	17 c4       	rjmp	.+2094   	; 0x88c <__vector_24+0x216>
  5e:	16 c4       	rjmp	.+2092   	; 0x88c <__vector_24+0x216>
  60:	15 c4       	rjmp	.+2090   	; 0x88c <__vector_24+0x216>
  62:	14 c4       	rjmp	.+2088   	; 0x88c <__vector_24+0x216>
  64:	2f c3       	rjmp	.+1630   	; 0x6c4 <__vector_24+0x4e>
  66:	12 c4       	rjmp	.+2084   	; 0x88c <__vector_24+0x216>
  68:	11 c4       	rjmp	.+2082   	; 0x88c <__vector_24+0x216>
  6a:	10 c4       	rjmp	.+2080   	; 0x88c <__vector_24+0x216>
  6c:	0f c4       	rjmp	.+2078   	; 0x88c <__vector_24+0x216>
  6e:	0e c4       	rjmp	.+2076   	; 0x88c <__vector_24+0x216>
  70:	0d c4       	rjmp	.+2074   	; 0x88c <__vector_24+0x216>
  72:	0c c4       	rjmp	.+2072   	; 0x88c <__vector_24+0x216>
  74:	53 c3       	rjmp	.+1702   	; 0x71c <__vector_24+0xa6>
  76:	0a c4       	rjmp	.+2068   	; 0x88c <__vector_24+0x216>
  78:	09 c4       	rjmp	.+2066   	; 0x88c <__vector_24+0x216>
  7a:	08 c4       	rjmp	.+2064   	; 0x88c <__vector_24+0x216>
  7c:	07 c4       	rjmp	.+2062   	; 0x88c <__vector_24+0x216>
  7e:	06 c4       	rjmp	.+2060   	; 0x88c <__vector_24+0x216>
  80:	05 c4       	rjmp	.+2058   	; 0x88c <__vector_24+0x216>
  82:	04 c4       	rjmp	.+2056   	; 0x88c <__vector_24+0x216>
  84:	1f c3       	rjmp	.+1598   	; 0x6c4 <__vector_24+0x4e>
  86:	02 c4       	rjmp	.+2052   	; 0x88c <__vector_24+0x216>
  88:	01 c4       	rjmp	.+2050   	; 0x88c <__vector_24+0x216>
  8a:	00 c4       	rjmp	.+2048   	; 0x88c <__vector_24+0x216>
  8c:	ff c3       	rjmp	.+2046   	; 0x88c <__vector_24+0x216>
  8e:	fe c3       	rjmp	.+2044   	; 0x88c <__vector_24+0x216>
  90:	fd c3       	rjmp	.+2042   	; 0x88c <__vector_24+0x216>
  92:	fc c3       	rjmp	.+2040   	; 0x88c <__vector_24+0x216>
  94:	43 c3       	rjmp	.+1670   	; 0x71c <__vector_24+0xa6>
  96:	fa c3       	rjmp	.+2036   	; 0x88c <__vector_24+0x216>
  98:	f9 c3       	rjmp	.+2034   	; 0x88c <__vector_24+0x216>
  9a:	f8 c3       	rjmp	.+2032   	; 0x88c <__vector_24+0x216>
  9c:	f7 c3       	rjmp	.+2030   	; 0x88c <__vector_24+0x216>
  9e:	f6 c3       	rjmp	.+2028   	; 0x88c <__vector_24+0x216>
  a0:	f5 c3       	rjmp	.+2026   	; 0x88c <__vector_24+0x216>
  a2:	f4 c3       	rjmp	.+2024   	; 0x88c <__vector_24+0x216>
  a4:	44 c3       	rjmp	.+1672   	; 0x72e <__vector_24+0xb8>
  a6:	f2 c3       	rjmp	.+2020   	; 0x88c <__vector_24+0x216>
  a8:	f1 c3       	rjmp	.+2018   	; 0x88c <__vector_24+0x216>
  aa:	f0 c3       	rjmp	.+2016   	; 0x88c <__vector_24+0x216>
  ac:	ef c3       	rjmp	.+2014   	; 0x88c <__vector_24+0x216>
  ae:	ee c3       	rjmp	.+2012   	; 0x88c <__vector_24+0x216>
  b0:	ed c3       	rjmp	.+2010   	; 0x88c <__vector_24+0x216>
  b2:	ec c3       	rjmp	.+2008   	; 0x88c <__vector_24+0x216>
  b4:	51 c3       	rjmp	.+1698   	; 0x758 <__vector_24+0xe2>
  b6:	ea c3       	rjmp	.+2004   	; 0x88c <__vector_24+0x216>
  b8:	e9 c3       	rjmp	.+2002   	; 0x88c <__vector_24+0x216>
  ba:	e8 c3       	rjmp	.+2000   	; 0x88c <__vector_24+0x216>
  bc:	e7 c3       	rjmp	.+1998   	; 0x88c <__vector_24+0x216>
  be:	e6 c3       	rjmp	.+1996   	; 0x88c <__vector_24+0x216>
  c0:	e5 c3       	rjmp	.+1994   	; 0x88c <__vector_24+0x216>
  c2:	e4 c3       	rjmp	.+1992   	; 0x88c <__vector_24+0x216>
  c4:	2b c3       	rjmp	.+1622   	; 0x71c <__vector_24+0xa6>
  c6:	e2 c3       	rjmp	.+1988   	; 0x88c <__vector_24+0x216>
  c8:	e1 c3       	rjmp	.+1986   	; 0x88c <__vector_24+0x216>
  ca:	e0 c3       	rjmp	.+1984   	; 0x88c <__vector_24+0x216>
  cc:	df c3       	rjmp	.+1982   	; 0x88c <__vector_24+0x216>
  ce:	de c3       	rjmp	.+1980   	; 0x88c <__vector_24+0x216>
  d0:	dd c3       	rjmp	.+1978   	; 0x88c <__vector_24+0x216>
  d2:	dc c3       	rjmp	.+1976   	; 0x88c <__vector_24+0x216>
  d4:	35 c3       	rjmp	.+1642   	; 0x740 <__vector_24+0xca>
  d6:	da c3       	rjmp	.+1972   	; 0x88c <__vector_24+0x216>
  d8:	d9 c3       	rjmp	.+1970   	; 0x88c <__vector_24+0x216>
  da:	d8 c3       	rjmp	.+1968   	; 0x88c <__vector_24+0x216>
  dc:	d7 c3       	rjmp	.+1966   	; 0x88c <__vector_24+0x216>
  de:	d6 c3       	rjmp	.+1964   	; 0x88c <__vector_24+0x216>
  e0:	d5 c3       	rjmp	.+1962   	; 0x88c <__vector_24+0x216>
  e2:	d4 c3       	rjmp	.+1960   	; 0x88c <__vector_24+0x216>
  e4:	0f c3       	rjmp	.+1566   	; 0x704 <__vector_24+0x8e>
  e6:	d2 c3       	rjmp	.+1956   	; 0x88c <__vector_24+0x216>
  e8:	d1 c3       	rjmp	.+1954   	; 0x88c <__vector_24+0x216>
  ea:	d0 c3       	rjmp	.+1952   	; 0x88c <__vector_24+0x216>
  ec:	cf c3       	rjmp	.+1950   	; 0x88c <__vector_24+0x216>
  ee:	ce c3       	rjmp	.+1948   	; 0x88c <__vector_24+0x216>
  f0:	cd c3       	rjmp	.+1946   	; 0x88c <__vector_24+0x216>
  f2:	cc c3       	rjmp	.+1944   	; 0x88c <__vector_24+0x216>
  f4:	49 c3       	rjmp	.+1682   	; 0x788 <__vector_24+0x112>
  f6:	ca c3       	rjmp	.+1940   	; 0x88c <__vector_24+0x216>
  f8:	c9 c3       	rjmp	.+1938   	; 0x88c <__vector_24+0x216>
  fa:	c8 c3       	rjmp	.+1936   	; 0x88c <__vector_24+0x216>
  fc:	c7 c3       	rjmp	.+1934   	; 0x88c <__vector_24+0x216>
  fe:	c6 c3       	rjmp	.+1932   	; 0x88c <__vector_24+0x216>
 100:	c5 c3       	rjmp	.+1930   	; 0x88c <__vector_24+0x216>
 102:	c4 c3       	rjmp	.+1928   	; 0x88c <__vector_24+0x216>
 104:	41 c3       	rjmp	.+1666   	; 0x788 <__vector_24+0x112>
 106:	c2 c3       	rjmp	.+1924   	; 0x88c <__vector_24+0x216>
 108:	c1 c3       	rjmp	.+1922   	; 0x88c <__vector_24+0x216>
 10a:	c0 c3       	rjmp	.+1920   	; 0x88c <__vector_24+0x216>
 10c:	bf c3       	rjmp	.+1918   	; 0x88c <__vector_24+0x216>
 10e:	be c3       	rjmp	.+1916   	; 0x88c <__vector_24+0x216>
 110:	bd c3       	rjmp	.+1914   	; 0x88c <__vector_24+0x216>
 112:	bc c3       	rjmp	.+1912   	; 0x88c <__vector_24+0x216>
 114:	39 c3       	rjmp	.+1650   	; 0x788 <__vector_24+0x112>
 116:	ba c3       	rjmp	.+1908   	; 0x88c <__vector_24+0x216>
 118:	b9 c3       	rjmp	.+1906   	; 0x88c <__vector_24+0x216>
 11a:	b8 c3       	rjmp	.+1904   	; 0x88c <__vector_24+0x216>
 11c:	b7 c3       	rjmp	.+1902   	; 0x88c <__vector_24+0x216>
 11e:	b6 c3       	rjmp	.+1900   	; 0x88c <__vector_24+0x216>
 120:	b5 c3       	rjmp	.+1898   	; 0x88c <__vector_24+0x216>
 122:	b4 c3       	rjmp	.+1896   	; 0x88c <__vector_24+0x216>
 124:	31 c3       	rjmp	.+1634   	; 0x788 <__vector_24+0x112>
 126:	b2 c3       	rjmp	.+1892   	; 0x88c <__vector_24+0x216>
 128:	b1 c3       	rjmp	.+1890   	; 0x88c <__vector_24+0x216>
 12a:	b0 c3       	rjmp	.+1888   	; 0x88c <__vector_24+0x216>
 12c:	af c3       	rjmp	.+1886   	; 0x88c <__vector_24+0x216>
 12e:	ae c3       	rjmp	.+1884   	; 0x88c <__vector_24+0x216>
 130:	ad c3       	rjmp	.+1882   	; 0x88c <__vector_24+0x216>
 132:	ac c3       	rjmp	.+1880   	; 0x88c <__vector_24+0x216>
 134:	35 c3       	rjmp	.+1642   	; 0x7a0 <__vector_24+0x12a>
 136:	aa c3       	rjmp	.+1876   	; 0x88c <__vector_24+0x216>
 138:	a9 c3       	rjmp	.+1874   	; 0x88c <__vector_24+0x216>
 13a:	a8 c3       	rjmp	.+1872   	; 0x88c <__vector_24+0x216>
 13c:	a7 c3       	rjmp	.+1870   	; 0x88c <__vector_24+0x216>
 13e:	a6 c3       	rjmp	.+1868   	; 0x88c <__vector_24+0x216>
 140:	a5 c3       	rjmp	.+1866   	; 0x88c <__vector_24+0x216>
 142:	a4 c3       	rjmp	.+1864   	; 0x88c <__vector_24+0x216>
 144:	49 c3       	rjmp	.+1682   	; 0x7d8 <__vector_24+0x162>
 146:	a2 c3       	rjmp	.+1860   	; 0x88c <__vector_24+0x216>
 148:	a1 c3       	rjmp	.+1858   	; 0x88c <__vector_24+0x216>
 14a:	a0 c3       	rjmp	.+1856   	; 0x88c <__vector_24+0x216>
 14c:	9f c3       	rjmp	.+1854   	; 0x88c <__vector_24+0x216>
 14e:	9e c3       	rjmp	.+1852   	; 0x88c <__vector_24+0x216>
 150:	9d c3       	rjmp	.+1850   	; 0x88c <__vector_24+0x216>
 152:	9c c3       	rjmp	.+1848   	; 0x88c <__vector_24+0x216>
 154:	25 c3       	rjmp	.+1610   	; 0x7a0 <__vector_24+0x12a>
 156:	9a c3       	rjmp	.+1844   	; 0x88c <__vector_24+0x216>
 158:	99 c3       	rjmp	.+1842   	; 0x88c <__vector_24+0x216>
 15a:	98 c3       	rjmp	.+1840   	; 0x88c <__vector_24+0x216>
 15c:	97 c3       	rjmp	.+1838   	; 0x88c <__vector_24+0x216>
 15e:	96 c3       	rjmp	.+1836   	; 0x88c <__vector_24+0x216>
 160:	95 c3       	rjmp	.+1834   	; 0x88c <__vector_24+0x216>
 162:	94 c3       	rjmp	.+1832   	; 0x88c <__vector_24+0x216>
 164:	39 c3       	rjmp	.+1650   	; 0x7d8 <__vector_24+0x162>
 166:	92 c3       	rjmp	.+1828   	; 0x88c <__vector_24+0x216>
 168:	91 c3       	rjmp	.+1826   	; 0x88c <__vector_24+0x216>
 16a:	90 c3       	rjmp	.+1824   	; 0x88c <__vector_24+0x216>
 16c:	8f c3       	rjmp	.+1822   	; 0x88c <__vector_24+0x216>
 16e:	8e c3       	rjmp	.+1820   	; 0x88c <__vector_24+0x216>
 170:	8d c3       	rjmp	.+1818   	; 0x88c <__vector_24+0x216>
 172:	8c c3       	rjmp	.+1816   	; 0x88c <__vector_24+0x216>
 174:	38 c3       	rjmp	.+1648   	; 0x7e6 <__vector_24+0x170>
 176:	8a c3       	rjmp	.+1812   	; 0x88c <__vector_24+0x216>
 178:	89 c3       	rjmp	.+1810   	; 0x88c <__vector_24+0x216>
 17a:	88 c3       	rjmp	.+1808   	; 0x88c <__vector_24+0x216>
 17c:	87 c3       	rjmp	.+1806   	; 0x88c <__vector_24+0x216>
 17e:	86 c3       	rjmp	.+1804   	; 0x88c <__vector_24+0x216>
 180:	85 c3       	rjmp	.+1802   	; 0x88c <__vector_24+0x216>
 182:	84 c3       	rjmp	.+1800   	; 0x88c <__vector_24+0x216>
 184:	44 c3       	rjmp	.+1672   	; 0x80e <__vector_24+0x198>
 186:	82 c3       	rjmp	.+1796   	; 0x88c <__vector_24+0x216>
 188:	81 c3       	rjmp	.+1794   	; 0x88c <__vector_24+0x216>
 18a:	80 c3       	rjmp	.+1792   	; 0x88c <__vector_24+0x216>
 18c:	7f c3       	rjmp	.+1790   	; 0x88c <__vector_24+0x216>
 18e:	7e c3       	rjmp	.+1788   	; 0x88c <__vector_24+0x216>
 190:	7d c3       	rjmp	.+1786   	; 0x88c <__vector_24+0x216>
 192:	7c c3       	rjmp	.+1784   	; 0x88c <__vector_24+0x216>
 194:	3c c3       	rjmp	.+1656   	; 0x80e <__vector_24+0x198>
 196:	7a c3       	rjmp	.+1780   	; 0x88c <__vector_24+0x216>
 198:	79 c3       	rjmp	.+1778   	; 0x88c <__vector_24+0x216>
 19a:	78 c3       	rjmp	.+1776   	; 0x88c <__vector_24+0x216>
 19c:	77 c3       	rjmp	.+1774   	; 0x88c <__vector_24+0x216>
 19e:	76 c3       	rjmp	.+1772   	; 0x88c <__vector_24+0x216>
 1a0:	75 c3       	rjmp	.+1770   	; 0x88c <__vector_24+0x216>
 1a2:	74 c3       	rjmp	.+1768   	; 0x88c <__vector_24+0x216>
 1a4:	44 c3       	rjmp	.+1672   	; 0x82e <__vector_24+0x1b8>
 1a6:	72 c3       	rjmp	.+1764   	; 0x88c <__vector_24+0x216>
 1a8:	71 c3       	rjmp	.+1762   	; 0x88c <__vector_24+0x216>
 1aa:	70 c3       	rjmp	.+1760   	; 0x88c <__vector_24+0x216>
 1ac:	6f c3       	rjmp	.+1758   	; 0x88c <__vector_24+0x216>
 1ae:	6e c3       	rjmp	.+1756   	; 0x88c <__vector_24+0x216>
 1b0:	6d c3       	rjmp	.+1754   	; 0x88c <__vector_24+0x216>
 1b2:	6c c3       	rjmp	.+1752   	; 0x88c <__vector_24+0x216>
 1b4:	5a c3       	rjmp	.+1716   	; 0x86a <__vector_24+0x1f4>
 1b6:	6a c3       	rjmp	.+1748   	; 0x88c <__vector_24+0x216>
 1b8:	69 c3       	rjmp	.+1746   	; 0x88c <__vector_24+0x216>
 1ba:	68 c3       	rjmp	.+1744   	; 0x88c <__vector_24+0x216>
 1bc:	67 c3       	rjmp	.+1742   	; 0x88c <__vector_24+0x216>
 1be:	66 c3       	rjmp	.+1740   	; 0x88c <__vector_24+0x216>
 1c0:	65 c3       	rjmp	.+1738   	; 0x88c <__vector_24+0x216>
 1c2:	64 c3       	rjmp	.+1736   	; 0x88c <__vector_24+0x216>
 1c4:	52 c3       	rjmp	.+1700   	; 0x86a <__vector_24+0x1f4>

000001c6 <__ctors_end>:
 1c6:	11 24       	eor	r1, r1
 1c8:	1f be       	out	0x3f, r1	; 63
 1ca:	cf ef       	ldi	r28, 0xFF	; 255
 1cc:	d4 e0       	ldi	r29, 0x04	; 4
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
 1d2:	11 e0       	ldi	r17, 0x01	; 1
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b1 e0       	ldi	r27, 0x01	; 1
 1d8:	e0 ef       	ldi	r30, 0xF0	; 240
 1da:	f8 e0       	ldi	r31, 0x08	; 8
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
 1de:	05 90       	lpm	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	a2 30       	cpi	r26, 0x02	; 2
 1e4:	b1 07       	cpc	r27, r17
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
 1e8:	11 e0       	ldi	r17, 0x01	; 1
 1ea:	a2 e0       	ldi	r26, 0x02	; 2
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
 1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
 1f2:	a4 32       	cpi	r26, 0x24	; 36
 1f4:	b1 07       	cpc	r27, r17
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
 1f8:	8b d0       	rcall	.+278    	; 0x310 <main>
 1fa:	78 c3       	rjmp	.+1776   	; 0x8ec <_exit>

000001fc <__bad_interrupt>:
 1fc:	01 cf       	rjmp	.-510    	; 0x0 <__vectors>

000001fe <a2dOff>:
}

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
 208:	80 81       	ld	r24, Z
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	80 83       	st	Z, r24
}
 20e:	08 95       	ret

00000210 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 210:	ea e7       	ldi	r30, 0x7A	; 122
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	98 7f       	andi	r25, 0xF8	; 248
 218:	89 2b       	or	r24, r25
 21a:	80 83       	st	Z, r24
}
 21c:	08 95       	ret

0000021e <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 21e:	ec e7       	ldi	r30, 0x7C	; 124
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	90 81       	ld	r25, Z
 224:	82 95       	swap	r24
 226:	88 0f       	add	r24, r24
 228:	88 0f       	add	r24, r24
 22a:	80 7c       	andi	r24, 0xC0	; 192
 22c:	9f 73       	andi	r25, 0x3F	; 63
 22e:	98 2b       	or	r25, r24
 230:	90 83       	st	Z, r25
}
 232:	08 95       	ret

00000234 <a2dInit>:

// functions

// initialize a2d converter
void a2dInit(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 238:	ca e7       	ldi	r28, 0x7A	; 122
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	88 81       	ld	r24, Y
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	88 83       	st	Y, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
 242:	88 81       	ld	r24, Y
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	88 83       	st	Y, r24
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	e2 df       	rcall	.-60     	; 0x210 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);	// set default reference
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	e7 df       	rcall	.-50     	; 0x21e <a2dSetReference>
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 250:	ec e7       	ldi	r30, 0x7C	; 124
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
 25a:	88 81       	ld	r24, Y
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	88 83       	st	Y, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 260:	10 92 18 01 	sts	0x0118, r1
	sei();							// turn on interrupts (if not already on)
 264:	78 94       	sei
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <a2dSetChannel>:
}

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 26c:	ec e7       	ldi	r30, 0x7C	; 124
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	8f 71       	andi	r24, 0x1F	; 31
 274:	90 7e       	andi	r25, 0xE0	; 224
 276:	98 2b       	or	r25, r24
 278:	90 83       	st	Z, r25
}
 27a:	08 95       	ret

0000027c <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 27c:	ea e7       	ldi	r30, 0x7A	; 122
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 61       	ori	r24, 0x10	; 16
 284:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
}
 28c:	08 95       	ret

0000028e <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
 28e:	80 91 7a 00 	lds	r24, 0x007A
}
 292:	80 74       	andi	r24, 0x40	; 64
 294:	08 95       	ret

00000296 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 296:	10 92 18 01 	sts	0x0118, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 29a:	ec e7       	ldi	r30, 0x7C	; 124
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	90 81       	ld	r25, Z
 2a0:	8f 71       	andi	r24, 0x1F	; 31
 2a2:	90 7e       	andi	r25, 0xE0	; 224
 2a4:	98 2b       	or	r25, r24
 2a6:	90 83       	st	Z, r25
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);						// start conversion
 2b2:	80 81       	ld	r24, Z
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	80 83       	st	Z, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 2b8:	80 81       	ld	r24, Z
 2ba:	86 fd       	sbrc	r24, 6
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <a2dConvert10bit+0x22>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 2be:	20 91 78 00 	lds	r18, 0x0078
 2c2:	30 91 79 00 	lds	r19, 0x0079
 2c6:	93 2f       	mov	r25, r19
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	28 2b       	or	r18, r24
 2ce:	39 2b       	or	r19, r25
}
 2d0:	82 2f       	mov	r24, r18
 2d2:	93 2f       	mov	r25, r19
 2d4:	08 95       	ret

000002d6 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 2d6:	df df       	rcall	.-66     	; 0x296 <a2dConvert10bit>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
}
 2e0:	08 95       	ret

000002e2 <__vector_21>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	80 93 18 01 	sts	0x0118, r24
}
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <i2cSlaveReceiveService>:
				break;
			}
		}
		*/
	//}
}
 300:	08 95       	ret

00000302 <i2cSlaveTransmitService>:

//	this function is called when a master on the bus addresses and wishes
//	to read data
u08 i2cSlaveTransmitService(u08 transmitDataLengthMax, u08* transmitData)
{
	PORTB |= (1<<PB0);
 302:	28 9a       	sbi	0x05, 0	; 5
	transmitData[0] = localBuffer[0];
 304:	80 91 21 01 	lds	r24, 0x0121
 308:	fb 01       	movw	r30, r22
 30a:	80 83       	st	Z, r24
	return 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	08 95       	ret

00000310 <main>:

//	function prototypes
void i2cSlaveReceiveService(u08 receiveDataLength, u08* receiveData);
u08 i2cSlaveTransmitService(u08 transmitDataLengthMax, u08* transmitData);

int main(void) {
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
#ifdef DEBUG
	DDRB |= (1<<PB0);
 318:	20 9a       	sbi	0x04, 0	; 4
#endif
	//	read our startup values from EEPROM
	LOCAL_I2C_ADDR = eeprom_read_byte(&_DeviceAddress);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	de d2       	rcall	.+1468   	; 0x8dc <__eerd_byte_m88a>
 320:	80 93 02 01 	sts	0x0102, r24
	ConversionMode = eeprom_read_byte(&_ConversionMode);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	d9 d2       	rcall	.+1458   	; 0x8dc <__eerd_byte_m88a>
 32a:	80 93 03 01 	sts	0x0103, r24
	Vref = eeprom_read_byte(&_VRef);
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	d4 d2       	rcall	.+1448   	; 0x8dc <__eerd_byte_m88a>
 334:	80 93 04 01 	sts	0x0104, r24
	DebugMode = eeprom_read_byte(&_DebugMode);
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	cf d2       	rcall	.+1438   	; 0x8dc <__eerd_byte_m88a>
 33e:	80 93 05 01 	sts	0x0105, r24
	
	if( DebugMode == DEBUG_ON ) {
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	09 f4       	brne	.+2      	; 0x348 <main+0x38>
		DDRB |= (1<<PB0);
 346:	20 9a       	sbi	0x04, 0	; 4
	}
	//	initialize our I2C bus
	i2cInit();
 348:	4a d0       	rcall	.+148    	; 0x3de <i2cInit>
	i2cSetLocalDeviceAddr(LOCAL_I2C_ADDR,0);
 34a:	80 91 02 01 	lds	r24, 0x0102
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	64 d0       	rcall	.+200    	; 0x41a <i2cSetLocalDeviceAddr>
	i2cSetSlaveReceiveHandler(i2cSlaveReceiveService);
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	6a d0       	rcall	.+212    	; 0x42c <i2cSetSlaveReceiveHandler>
	i2cSetSlaveTransmitHandler(i2cSlaveTransmitService);
 358:	81 e8       	ldi	r24, 0x81	; 129
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	6c d0       	rcall	.+216    	; 0x436 <i2cSetSlaveTransmitHandler>
	//	initialize ADC
	a2dInit();
 35e:	6a df       	rcall	.-300    	; 0x234 <a2dInit>
	a2dSetReference(Vref);
 360:	80 91 04 01 	lds	r24, 0x0104
 364:	5c df       	rcall	.-328    	; 0x21e <a2dSetReference>
	
	//	main loop reads the ADC's in a round-robin fashion
	u08 current_adc = 0;
 366:	10 e0       	ldi	r17, 0x00	; 0
    while(1) {
		if( ConversionMode == CONVERSION_MODE_10BIT ) {
			A2D[current_adc] = a2dConvert10bit(current_adc);
 368:	c9 e1       	ldi	r28, 0x19	; 25
 36a:	d1 e0       	ldi	r29, 0x01	; 1
        else {
			A2D[current_adc] = (u16)0x0000 | a2dConvert8bit(current_adc);
		}
        current_adc++;
        if( current_adc > 3 ) {
        	current_adc = 0;
 36c:	00 e0       	ldi	r16, 0x00	; 0
 36e:	01 c0       	rjmp	.+2      	; 0x372 <main+0x62>
 370:	10 2f       	mov	r17, r16
	a2dSetReference(Vref);
	
	//	main loop reads the ADC's in a round-robin fashion
	u08 current_adc = 0;
    while(1) {
		if( ConversionMode == CONVERSION_MODE_10BIT ) {
 372:	80 91 03 01 	lds	r24, 0x0103
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	59 f4       	brne	.+22     	; 0x390 <main+0x80>
			A2D[current_adc] = a2dConvert10bit(current_adc);
 37a:	81 2f       	mov	r24, r17
 37c:	8c df       	rcall	.-232    	; 0x296 <a2dConvert10bit>
 37e:	e1 2f       	mov	r30, r17
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	ec 0f       	add	r30, r28
 388:	fd 1f       	adc	r31, r29
 38a:	91 83       	std	Z+1, r25	; 0x01
 38c:	80 83       	st	Z, r24
 38e:	0a c0       	rjmp	.+20     	; 0x3a4 <main+0x94>
		}			
        else {
			A2D[current_adc] = (u16)0x0000 | a2dConvert8bit(current_adc);
 390:	81 2f       	mov	r24, r17
 392:	a1 df       	rcall	.-190    	; 0x2d6 <a2dConvert8bit>
 394:	e1 2f       	mov	r30, r17
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	ec 0f       	add	r30, r28
 39e:	fd 1f       	adc	r31, r29
 3a0:	80 83       	st	Z, r24
 3a2:	11 82       	std	Z+1, r1	; 0x01
		}
        current_adc++;
 3a4:	1f 5f       	subi	r17, 0xFF	; 255
        if( current_adc > 3 ) {
 3a6:	14 30       	cpi	r17, 0x04	; 4
 3a8:	18 f7       	brcc	.-58     	; 0x370 <main+0x60>
 3aa:	e3 cf       	rjmp	.-58     	; 0x372 <main+0x62>

000003ac <i2cSetBitrate>:
	// enable interrupts
	sei();
}

void i2cSetBitrate(u16 bitrateKHz)
{
 3ac:	bc 01       	movw	r22, r24
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
 3ae:	e9 eb       	ldi	r30, 0xB9	; 185
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	8e 7f       	andi	r24, 0xFE	; 254
 3b6:	80 83       	st	Z, r24
		cbi(TWSR, TWPS1);
 3b8:	80 81       	ld	r24, Z
 3ba:	8d 7f       	andi	r24, 0xFD	; 253
 3bc:	80 83       	st	Z, r24
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
 3be:	80 e4       	ldi	r24, 0x40	; 64
 3c0:	9f e1       	ldi	r25, 0x1F	; 31
 3c2:	78 d2       	rcall	.+1264   	; 0x8b4 <__udivmodhi4>
	if(bitrate_div >= 16)
 3c4:	60 31       	cpi	r22, 0x10	; 16
 3c6:	40 f0       	brcs	.+16     	; 0x3d8 <i2cSetBitrate+0x2c>
		bitrate_div = (bitrate_div-16)/2;
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	60 51       	subi	r22, 0x10	; 16
 3cc:	70 40       	sbci	r23, 0x00	; 0
 3ce:	12 f4       	brpl	.+4      	; 0x3d4 <i2cSetBitrate+0x28>
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	75 95       	asr	r23
 3d6:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
 3d8:	60 93 b8 00 	sts	0x00B8, r22
}
 3dc:	08 95       	ret

000003de <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 0);	// i2c SCL on ATmega163,323,16,32,etc
 3de:	40 9a       	sbi	0x08, 0	; 8
	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
 3e0:	41 9a       	sbi	0x08, 1	; 8
	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
 3e2:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on ATmega128,64
 3e4:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
 3e6:	10 92 15 01 	sts	0x0115, r1
 3ea:	10 92 14 01 	sts	0x0114, r1
	i2cSlaveTransmit = 0;
 3ee:	10 92 17 01 	sts	0x0117, r1
 3f2:	10 92 16 01 	sts	0x0116, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
 3f6:	84 e6       	ldi	r24, 0x64	; 100
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	d8 df       	rcall	.-80     	; 0x3ac <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 3fc:	ec eb       	ldi	r30, 0xBC	; 188
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	84 60       	ori	r24, 0x04	; 4
 404:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
 406:	10 92 06 01 	sts	0x0106, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 40a:	80 81       	ld	r24, Z
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 410:	80 81       	ld	r24, Z
 412:	80 64       	ori	r24, 0x40	; 64
 414:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
 416:	78 94       	sei
}
 418:	08 95       	ret

0000041a <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	66 23       	and	r22, r22
 41e:	09 f4       	brne	.+2      	; 0x422 <i2cSetLocalDeviceAddr+0x8>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	98 2b       	or	r25, r24
 426:	90 93 ba 00 	sts	0x00BA, r25
}
 42a:	08 95       	ret

0000042c <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
 42c:	90 93 15 01 	sts	0x0115, r25
 430:	80 93 14 01 	sts	0x0114, r24
}
 434:	08 95       	ret

00000436 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
 436:	90 93 17 01 	sts	0x0117, r25
 43a:	80 93 16 01 	sts	0x0116, r24
}
 43e:	08 95       	ret

00000440 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 440:	ec eb       	ldi	r30, 0xBC	; 188
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	80 6a       	ori	r24, 0xA0	; 160
 44a:	80 83       	st	Z, r24
}
 44c:	08 95       	ret

0000044e <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 44e:	ec eb       	ldi	r30, 0xBC	; 188
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	80 6d       	ori	r24, 0xD0	; 208
 458:	80 83       	st	Z, r24
}
 45a:	08 95       	ret

0000045c <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 45c:	ec eb       	ldi	r30, 0xBC	; 188
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	ec f7       	brge	.-6      	; 0x460 <i2cWaitForComplete+0x4>
}
 466:	08 95       	ret

00000468 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 468:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 46c:	ec eb       	ldi	r30, 0xBC	; 188
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	8f 70       	andi	r24, 0x0F	; 15
 474:	80 68       	ori	r24, 0x80	; 128
 476:	80 83       	st	Z, r24
}
 478:	08 95       	ret

0000047a <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
 47a:	88 23       	and	r24, r24
 47c:	39 f0       	breq	.+14     	; 0x48c <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 47e:	ec eb       	ldi	r30, 0xBC	; 188
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 6c       	ori	r24, 0xC0	; 192
 488:	80 83       	st	Z, r24
 48a:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 48c:	ec eb       	ldi	r30, 0xBC	; 188
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	8f 70       	andi	r24, 0x0F	; 15
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 83       	st	Z, r24
 498:	08 95       	ret

0000049a <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 49a:	80 91 bb 00 	lds	r24, 0x00BB
}
 49e:	08 95       	ret

000004a0 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
 4a0:	80 91 b9 00 	lds	r24, 0x00B9
}
 4a4:	08 95       	ret

000004a6 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 4a6:	90 91 06 01 	lds	r25, 0x0106
 4aa:	99 23       	and	r25, r25
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <i2cMasterSend>
	// set state
	I2cState = I2C_MASTER_TX;
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	90 93 06 01 	sts	0x0106, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	80 93 07 01 	sts	0x0107, r24
	for(i=0; i<length; i++)
 4ba:	66 23       	and	r22, r22
 4bc:	79 f0       	breq	.+30     	; 0x4dc <i2cMasterSend+0x36>
 4be:	a4 2f       	mov	r26, r20
 4c0:	b5 2f       	mov	r27, r21
 4c2:	ea e0       	ldi	r30, 0x0A	; 10
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
 4c6:	cf 01       	movw	r24, r30
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	26 2f       	mov	r18, r22
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	82 0f       	add	r24, r18
 4d0:	91 1d       	adc	r25, r1
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
 4d2:	2d 91       	ld	r18, X+
 4d4:	21 93       	st	Z+, r18
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
 4d6:	e8 17       	cp	r30, r24
 4d8:	f9 07       	cpc	r31, r25
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <i2cMasterSend+0x2c>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
 4dc:	10 92 08 01 	sts	0x0108, r1
	I2cSendDataLength = length;
 4e0:	60 93 09 01 	sts	0x0109, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 4e4:	ec eb       	ldi	r30, 0xBC	; 188
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	80 6a       	ori	r24, 0xA0	; 160
 4ee:	80 83       	st	Z, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
 4f0:	08 95       	ret

000004f2 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
 4f2:	da 01       	movw	r26, r20
	u08 i;
	// wait for interface to be ready
	while(I2cState);
 4f4:	90 91 06 01 	lds	r25, 0x0106
 4f8:	99 23       	and	r25, r25
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
 4fc:	93 e0       	ldi	r25, 0x03	; 3
 4fe:	90 93 06 01 	sts	0x0106, r25
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
 502:	81 60       	ori	r24, 0x01	; 1
 504:	80 93 07 01 	sts	0x0107, r24
	I2cReceiveDataIndex = 0;
 508:	10 92 0e 01 	sts	0x010E, r1
	I2cReceiveDataLength = length;
 50c:	60 93 13 01 	sts	0x0113, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 510:	ec eb       	ldi	r30, 0xBC	; 188
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	8f 70       	andi	r24, 0x0F	; 15
 518:	80 6a       	ori	r24, 0xA0	; 160
 51a:	80 83       	st	Z, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
 51c:	80 91 06 01 	lds	r24, 0x0106
 520:	88 23       	and	r24, r24
 522:	e1 f7       	brne	.-8      	; 0x51c <__stack+0x1d>
	// return data
	for(i=0; i<length; i++)
 524:	66 23       	and	r22, r22
 526:	61 f0       	breq	.+24     	; 0x540 <__stack+0x41>
 528:	ef e0       	ldi	r30, 0x0F	; 15
 52a:	f1 e0       	ldi	r31, 0x01	; 1
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
 52c:	cf 01       	movw	r24, r30
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	61 50       	subi	r22, 0x01	; 1
 532:	86 0f       	add	r24, r22
 534:	91 1d       	adc	r25, r1
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
 536:	21 91       	ld	r18, Z+
 538:	2d 93       	st	X+, r18
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
 53a:	e8 17       	cp	r30, r24
 53c:	f9 07       	cpc	r31, r25
 53e:	d9 f7       	brne	.-10     	; 0x536 <__stack+0x37>
 540:	08 95       	ret

00000542 <i2cMasterSendNI>:
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	da 01       	movw	r26, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 548:	ec eb       	ldi	r30, 0xBC	; 188
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	90 81       	ld	r25, Z
 54e:	9e 7f       	andi	r25, 0xFE	; 254
 550:	90 83       	st	Z, r25
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 552:	90 81       	ld	r25, Z
 554:	9f 70       	andi	r25, 0x0F	; 15
 556:	90 6a       	ori	r25, 0xA0	; 160
 558:	90 83       	st	Z, r25
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 55a:	90 81       	ld	r25, Z
 55c:	99 23       	and	r25, r25
 55e:	ec f7       	brge	.-6      	; 0x55a <i2cMasterSendNI+0x18>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
 560:	8e 7f       	andi	r24, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 562:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 566:	ec eb       	ldi	r30, 0xBC	; 188
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	80 68       	ori	r24, 0x80	; 128
 570:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 572:	80 81       	ld	r24, Z
 574:	88 23       	and	r24, r24
 576:	ec f7       	brge	.-6      	; 0x572 <i2cMasterSendNI+0x30>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
 578:	80 91 b9 00 	lds	r24, 0x00B9
 57c:	88 31       	cpi	r24, 0x18	; 24
 57e:	99 f4       	brne	.+38     	; 0x5a6 <i2cMasterSendNI+0x64>
	{
		// send data
		while(length)
 580:	66 23       	and	r22, r22
 582:	99 f0       	breq	.+38     	; 0x5aa <i2cMasterSendNI+0x68>
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 584:	cb eb       	ldi	r28, 0xBB	; 187
 586:	d0 e0       	ldi	r29, 0x00	; 0
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 588:	ec eb       	ldi	r30, 0xBC	; 188
 58a:	f0 e0       	ldi	r31, 0x00	; 0
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
 58c:	8d 91       	ld	r24, X+
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 58e:	88 83       	st	Y, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 590:	80 81       	ld	r24, Z
 592:	8f 70       	andi	r24, 0x0F	; 15
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 598:	80 81       	ld	r24, Z
 59a:	88 23       	and	r24, r24
 59c:	ec f7       	brge	.-6      	; 0x598 <i2cMasterSendNI+0x56>
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
			i2cWaitForComplete();
			length--;
 59e:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
 5a0:	a9 f7       	brne	.-22     	; 0x58c <i2cMasterSendNI+0x4a>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <i2cMasterSendNI+0x6a>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <i2cMasterSendNI+0x6a>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 5ac:	ec eb       	ldi	r30, 0xBC	; 188
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	90 81       	ld	r25, Z
 5b2:	9f 70       	andi	r25, 0x0F	; 15
 5b4:	90 6d       	ori	r25, 0xD0	; 208
 5b6:	90 83       	st	Z, r25
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
 5b8:	90 81       	ld	r25, Z
 5ba:	94 ff       	sbrs	r25, 4
 5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <i2cMasterSendNI+0x76>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 5be:	ec eb       	ldi	r30, 0xBC	; 188
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	90 81       	ld	r25, Z
 5c4:	91 60       	ori	r25, 0x01	; 1
 5c6:	90 83       	st	Z, r25

	return retval;
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 5d2:	ec eb       	ldi	r30, 0xBC	; 188
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	90 81       	ld	r25, Z
 5d8:	9e 7f       	andi	r25, 0xFE	; 254
 5da:	90 83       	st	Z, r25
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 5dc:	90 81       	ld	r25, Z
 5de:	9f 70       	andi	r25, 0x0F	; 15
 5e0:	90 6a       	ori	r25, 0xA0	; 160
 5e2:	90 83       	st	Z, r25
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 5e4:	90 81       	ld	r25, Z
 5e6:	99 23       	and	r25, r25
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <i2cMasterReceiveNI+0x16>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
 5ea:	81 60       	ori	r24, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 5ec:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 5f0:	ec eb       	ldi	r30, 0xBC	; 188
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	80 68       	ori	r24, 0x80	; 128
 5fa:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 5fc:	80 81       	ld	r24, Z
 5fe:	88 23       	and	r24, r24
 600:	ec f7       	brge	.-6      	; 0x5fc <i2cMasterReceiveNI+0x2e>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
 602:	80 91 b9 00 	lds	r24, 0x00B9
 606:	80 34       	cpi	r24, 0x40	; 64
 608:	49 f5       	brne	.+82     	; 0x65c <i2cMasterReceiveNI+0x8e>
	{
		// accept receive data and ack it
		while(length > 1)
 60a:	62 30       	cpi	r22, 0x02	; 2
 60c:	c0 f0       	brcs	.+48     	; 0x63e <i2cMasterReceiveNI+0x70>
 60e:	da 01       	movw	r26, r20
 610:	96 2f       	mov	r25, r22
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 612:	ec eb       	ldi	r30, 0xBC	; 188
 614:	f0 e0       	ldi	r31, 0x00	; 0
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 616:	cb eb       	ldi	r28, 0xBB	; 187
 618:	d0 e0       	ldi	r29, 0x00	; 0
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 61a:	80 81       	ld	r24, Z
 61c:	8f 70       	andi	r24, 0x0F	; 15
 61e:	80 6c       	ori	r24, 0xC0	; 192
 620:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 622:	80 81       	ld	r24, Z
 624:	88 23       	and	r24, r24
 626:	ec f7       	brge	.-6      	; 0x622 <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 628:	88 81       	ld	r24, Y
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
 62a:	8d 93       	st	X+, r24
			// decrement length
			length--;
 62c:	91 50       	subi	r25, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
 62e:	92 30       	cpi	r25, 0x02	; 2
 630:	a0 f7       	brcc	.-24     	; 0x61a <i2cMasterReceiveNI+0x4c>
	sbi(TWCR, TWIE);

	return retval;
}

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
 632:	62 50       	subi	r22, 0x02	; 2
 634:	86 2f       	mov	r24, r22
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	01 96       	adiw	r24, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
 63a:	48 0f       	add	r20, r24
 63c:	59 1f       	adc	r21, r25
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 63e:	ec eb       	ldi	r30, 0xBC	; 188
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	8f 70       	andi	r24, 0x0F	; 15
 646:	80 68       	ori	r24, 0x80	; 128
 648:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 64a:	80 81       	ld	r24, Z
 64c:	88 23       	and	r24, r24
 64e:	ec f7       	brge	.-6      	; 0x64a <i2cMasterReceiveNI+0x7c>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 650:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
 654:	fa 01       	movw	r30, r20
 656:	80 83       	st	Z, r24
	return retval;
}

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
	u08 retval = I2C_OK;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	01 c0       	rjmp	.+2      	; 0x65e <i2cMasterReceiveNI+0x90>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 65c:	81 e0       	ldi	r24, 0x01	; 1

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 65e:	ec eb       	ldi	r30, 0xBC	; 188
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	90 81       	ld	r25, Z
 664:	9f 70       	andi	r25, 0x0F	; 15
 666:	90 6d       	ori	r25, 0xD0	; 208
 668:	90 83       	st	Z, r25
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 66a:	90 81       	ld	r25, Z
 66c:	91 60       	ori	r25, 0x01	; 1
 66e:	90 83       	st	Z, r25

	return retval;
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <__vector_24>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	5f 93       	push	r21
 688:	6f 93       	push	r22
 68a:	7f 93       	push	r23
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	af 93       	push	r26
 692:	bf 93       	push	r27
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
 698:	e0 91 b9 00 	lds	r30, 0x00B9
 69c:	e8 7f       	andi	r30, 0xF8	; 248

	switch(status)
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	e9 3c       	cpi	r30, 0xC9	; 201
 6a2:	f1 05       	cpc	r31, r1
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__vector_24+0x32>
 6a6:	f2 c0       	rjmp	.+484    	; 0x88c <__vector_24+0x216>
 6a8:	e6 5e       	subi	r30, 0xE6	; 230
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	09 94       	ijmp
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
 6ae:	80 91 07 01 	lds	r24, 0x0107
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 6b2:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 6b6:	ec eb       	ldi	r30, 0xBC	; 188
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	8f 70       	andi	r24, 0x0F	; 15
 6be:	80 68       	ori	r24, 0x80	; 128
 6c0:	80 83       	st	Z, r24
 6c2:	e4 c0       	rjmp	.+456    	; 0x88c <__vector_24+0x216>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
 6c4:	80 91 08 01 	lds	r24, 0x0108
 6c8:	90 91 09 01 	lds	r25, 0x0109
 6cc:	89 17       	cp	r24, r25
 6ce:	88 f4       	brcc	.+34     	; 0x6f2 <__vector_24+0x7c>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
 6d0:	e8 2f       	mov	r30, r24
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	e6 5f       	subi	r30, 0xF6	; 246
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	90 81       	ld	r25, Z
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	80 93 08 01 	sts	0x0108, r24
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 6e0:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 6e4:	ec eb       	ldi	r30, 0xBC	; 188
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	8f 70       	andi	r24, 0x0F	; 15
 6ec:	80 68       	ori	r24, 0x80	; 128
 6ee:	80 83       	st	Z, r24
 6f0:	cd c0       	rjmp	.+410    	; 0x88c <__vector_24+0x216>

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 6f2:	ec eb       	ldi	r30, 0xBC	; 188
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	8f 70       	andi	r24, 0x0F	; 15
 6fa:	80 6d       	ori	r24, 0xD0	; 208
 6fc:	80 83       	st	Z, r24
		else
		{
			// transmit stop condition, enable SLA ACK
			i2cSendStop();
			// set state
			I2cState = I2C_IDLE;
 6fe:	10 92 06 01 	sts	0x0106, r1
 702:	c4 c0       	rjmp	.+392    	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 704:	80 91 0e 01 	lds	r24, 0x010E
 708:	90 91 bb 00 	lds	r25, 0x00BB
 70c:	e8 2f       	mov	r30, r24
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	e1 5f       	subi	r30, 0xF1	; 241
 712:	fe 4f       	sbci	r31, 0xFE	; 254
 714:	90 83       	st	Z, r25
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	80 93 0e 01 	sts	0x010E, r24

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 71c:	ec eb       	ldi	r30, 0xBC	; 188
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	8f 70       	andi	r24, 0x0F	; 15
 724:	80 6d       	ori	r24, 0xD0	; 208
 726:	80 83       	st	Z, r24
		rprintfInit(uart1SendByte);
		#endif
		// transmit stop condition, enable SLA ACK
		i2cSendStop();
		// set state
		I2cState = I2C_IDLE;
 728:	10 92 06 01 	sts	0x0106, r1
		break;
 72c:	af c0       	rjmp	.+350    	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 72e:	ec eb       	ldi	r30, 0xBC	; 188
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8f 70       	andi	r24, 0x0F	; 15
 736:	80 68       	ori	r24, 0x80	; 128
 738:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 73a:	10 92 06 01 	sts	0x0106, r1
		// release bus and transmit start when bus is free
		//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
		break;
 73e:	a6 c0       	rjmp	.+332    	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 740:	80 91 0e 01 	lds	r24, 0x010E
 744:	90 91 bb 00 	lds	r25, 0x00BB
 748:	e8 2f       	mov	r30, r24
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	e1 5f       	subi	r30, 0xF1	; 241
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	90 83       	st	Z, r25
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	80 93 0e 01 	sts	0x010E, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
 758:	20 91 0e 01 	lds	r18, 0x010E
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	80 91 13 01 	lds	r24, 0x0113
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	28 17       	cp	r18, r24
 768:	39 07       	cpc	r19, r25
 76a:	3c f4       	brge	.+14     	; 0x77a <__vector_24+0x104>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 76c:	ec eb       	ldi	r30, 0xBC	; 188
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	8f 70       	andi	r24, 0x0F	; 15
 774:	80 6c       	ori	r24, 0xC0	; 192
 776:	80 83       	st	Z, r24
 778:	89 c0       	rjmp	.+274    	; 0x88c <__vector_24+0x216>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 77a:	ec eb       	ldi	r30, 0xBC	; 188
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	8f 70       	andi	r24, 0x0F	; 15
 782:	80 68       	ori	r24, 0x80	; 128
 784:	80 83       	st	Z, r24
 786:	82 c0       	rjmp	.+260    	; 0x88c <__vector_24+0x216>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
 788:	85 e0       	ldi	r24, 0x05	; 5
 78a:	80 93 06 01 	sts	0x0106, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
 78e:	10 92 0e 01 	sts	0x010E, r1
		// receive data byte and return ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 792:	ec eb       	ldi	r30, 0xBC	; 188
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8f 70       	andi	r24, 0x0F	; 15
 79a:	80 6c       	ori	r24, 0xC0	; 192
 79c:	80 83       	st	Z, r24
		break;
 79e:	76 c0       	rjmp	.+236    	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 7a0:	80 91 0e 01 	lds	r24, 0x010E
 7a4:	90 91 bb 00 	lds	r25, 0x00BB
 7a8:	e8 2f       	mov	r30, r24
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	e1 5f       	subi	r30, 0xF1	; 241
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	90 83       	st	Z, r25
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	80 93 0e 01 	sts	0x010E, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
 7b8:	84 30       	cpi	r24, 0x04	; 4
 7ba:	38 f4       	brcc	.+14     	; 0x7ca <__vector_24+0x154>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 7bc:	ec eb       	ldi	r30, 0xBC	; 188
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	8f 70       	andi	r24, 0x0F	; 15
 7c4:	80 6c       	ori	r24, 0xC0	; 192
 7c6:	80 83       	st	Z, r24
 7c8:	61 c0       	rjmp	.+194    	; 0x88c <__vector_24+0x216>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 7ca:	ec eb       	ldi	r30, 0xBC	; 188
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	8f 70       	andi	r24, 0x0F	; 15
 7d2:	80 68       	ori	r24, 0x80	; 128
 7d4:	80 83       	st	Z, r24
 7d6:	5a c0       	rjmp	.+180    	; 0x88c <__vector_24+0x216>
 7d8:	ec eb       	ldi	r30, 0xBC	; 188
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	8f 70       	andi	r24, 0x0F	; 15
 7e0:	80 68       	ori	r24, 0x80	; 128
 7e2:	80 83       	st	Z, r24
 7e4:	53 c0       	rjmp	.+166    	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 7e6:	ec eb       	ldi	r30, 0xBC	; 188
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	8f 70       	andi	r24, 0x0F	; 15
 7ee:	80 6c       	ori	r24, 0xC0	; 192
 7f0:	80 83       	st	Z, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
 7f2:	e0 91 14 01 	lds	r30, 0x0114
 7f6:	f0 91 15 01 	lds	r31, 0x0115
 7fa:	30 97       	sbiw	r30, 0x00	; 0
 7fc:	29 f0       	breq	.+10     	; 0x808 <__vector_24+0x192>
 7fe:	80 91 0e 01 	lds	r24, 0x010E
 802:	6f e0       	ldi	r22, 0x0F	; 15
 804:	71 e0       	ldi	r23, 0x01	; 1
 806:	09 95       	icall
		// set state
		I2cState = I2C_IDLE;
 808:	10 92 06 01 	sts	0x0106, r1
		break;
 80c:	3f c0       	rjmp	.+126    	; 0x88c <__vector_24+0x216>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
 80e:	84 e0       	ldi	r24, 0x04	; 4
 810:	80 93 06 01 	sts	0x0106, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
 814:	e0 91 16 01 	lds	r30, 0x0116
 818:	f0 91 17 01 	lds	r31, 0x0117
 81c:	30 97       	sbiw	r30, 0x00	; 0
 81e:	29 f0       	breq	.+10     	; 0x82a <__vector_24+0x1b4>
 820:	6a e0       	ldi	r22, 0x0A	; 10
 822:	71 e0       	ldi	r23, 0x01	; 1
 824:	09 95       	icall
 826:	80 93 09 01 	sts	0x0109, r24
		// reset data index
		I2cSendDataIndex = 0;
 82a:	10 92 08 01 	sts	0x0108, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
 82e:	80 91 08 01 	lds	r24, 0x0108
 832:	e8 2f       	mov	r30, r24
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	e6 5f       	subi	r30, 0xF6	; 246
 838:	fe 4f       	sbci	r31, 0xFE	; 254
 83a:	90 81       	ld	r25, Z
 83c:	90 93 bb 00 	sts	0x00BB, r25
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	80 93 08 01 	sts	0x0108, r24
		if(I2cSendDataIndex < I2cSendDataLength)
 846:	90 91 09 01 	lds	r25, 0x0109
 84a:	89 17       	cp	r24, r25
 84c:	38 f4       	brcc	.+14     	; 0x85c <__vector_24+0x1e6>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 84e:	ec eb       	ldi	r30, 0xBC	; 188
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	8f 70       	andi	r24, 0x0F	; 15
 856:	80 6c       	ori	r24, 0xC0	; 192
 858:	80 83       	st	Z, r24
 85a:	18 c0       	rjmp	.+48     	; 0x88c <__vector_24+0x216>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 85c:	ec eb       	ldi	r30, 0xBC	; 188
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	80 68       	ori	r24, 0x80	; 128
 866:	80 83       	st	Z, r24
 868:	11 c0       	rjmp	.+34     	; 0x88c <__vector_24+0x216>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 86a:	ec eb       	ldi	r30, 0xBC	; 188
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	8f 70       	andi	r24, 0x0F	; 15
 872:	80 6c       	ori	r24, 0xC0	; 192
 874:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 876:	10 92 06 01 	sts	0x0106, r1
		break;
 87a:	08 c0       	rjmp	.+16     	; 0x88c <__vector_24+0x216>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
 87c:	ec eb       	ldi	r30, 0xBC	; 188
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	8f 70       	andi	r24, 0x0F	; 15
 884:	80 6d       	ori	r24, 0xD0	; 208
 886:	80 83       	st	Z, r24
		// set state
		I2cState = I2C_IDLE;
 888:	10 92 06 01 	sts	0x0106, r1
		break;
	}
}
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
 8ae:	80 91 06 01 	lds	r24, 0x0106
}
 8b2:	08 95       	ret

000008b4 <__udivmodhi4>:
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	51 e1       	ldi	r21, 0x11	; 17
 8ba:	07 c0       	rjmp	.+14     	; 0x8ca <__udivmodhi4_ep>

000008bc <__udivmodhi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	a6 17       	cp	r26, r22
 8c2:	b7 07       	cpc	r27, r23
 8c4:	10 f0       	brcs	.+4      	; 0x8ca <__udivmodhi4_ep>
 8c6:	a6 1b       	sub	r26, r22
 8c8:	b7 0b       	sbc	r27, r23

000008ca <__udivmodhi4_ep>:
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	5a 95       	dec	r21
 8d0:	a9 f7       	brne	.-22     	; 0x8bc <__udivmodhi4_loop>
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	bc 01       	movw	r22, r24
 8d8:	cd 01       	movw	r24, r26
 8da:	08 95       	ret

000008dc <__eerd_byte_m88a>:
 8dc:	f9 99       	sbic	0x1f, 1	; 31
 8de:	fe cf       	rjmp	.-4      	; 0x8dc <__eerd_byte_m88a>
 8e0:	92 bd       	out	0x22, r25	; 34
 8e2:	81 bd       	out	0x21, r24	; 33
 8e4:	f8 9a       	sbi	0x1f, 0	; 31
 8e6:	99 27       	eor	r25, r25
 8e8:	80 b5       	in	r24, 0x20	; 32
 8ea:	08 95       	ret

000008ec <_exit>:
 8ec:	f8 94       	cli

000008ee <__stop_program>:
 8ee:	ff cf       	rjmp	.-2      	; 0x8ee <__stop_program>
